import os
import json
import asyncio
import random
from telethon import TelegramClient, events
from telethon.tl.functions.contacts import GetContactsRequest
from telethon.errors import FloodWaitError, PeerFloodError
import telethon

# ü§ñ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
from notification_bot import init_notification_bot, notify_admin_via_bot, notification_bot

# üóÇÔ∏è –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä
from chat_manager import ChatManager

CONFIG_FILE = "config.json"
SESSION_FOLDER = "sessions"
USERS_FILE = "target_users.txt"
PROXY_FOLDER = "proxies"


# ---------- –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ ----------
def load_config():
    if not os.path.exists(CONFIG_FILE):
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_config = {
            "api_id": "",
            "api_hash": "",
            "accounts_per_proxy": 1,
            "proxy_mode": "auto",
            "target_users_file": USERS_FILE,
            "message": "–ü—Ä–∏–≤–µ—Ç!",
            "delay_ms": 1000,
            "messages_per_account": 2,
            "proxy_type": "socks5",
                    "admin_username": "",  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å admin_id –Ω–∞ admin_username
        "auto_hide_chats": True,
        "auto_delete_delay": 4,
        "auto_ttl_messages": True
        }
        with open(CONFIG_FILE, "w", encoding="utf-8") as f:
            json.dump(default_config, f, indent=4, ensure_ascii=False)
        return default_config

    with open(CONFIG_FILE, "r", encoding="utf-8") as f:
        cfg = json.load(f)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
    defaults = {
        "accounts_per_proxy": 1,
        "proxy_mode": "auto",
        "target_users_file": USERS_FILE,
        "message": "–ü—Ä–∏–≤–µ—Ç!",
        "delay_ms": 1000,
        "messages_per_account": 1,
        "proxy_type": "socks5",
        "admin_username": "",
        "auto_hide_chats": True,
        "auto_delete_delay": 4,
        "auto_ttl_messages": True
    }

    for key, value in defaults.items():
        if key not in cfg:
            cfg[key] = value

    return cfg


def save_config(cfg):
    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump(cfg, f, indent=4, ensure_ascii=False)


# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ----------
def load_users(users_file):
    if not os.path.exists(users_file):
        print(f"[!] –§–∞–π–ª {users_file} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π.")
        open(users_file, "w", encoding="utf-8").close()
        return []
    with open(users_file, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]


# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ ----------
def load_proxies():
    if not os.path.exists(PROXY_FOLDER):
        os.makedirs(PROXY_FOLDER)
        print(f"[!] –ü–∞–ø–∫–∞ {PROXY_FOLDER} —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return []

    proxies = []
    for fname in os.listdir(PROXY_FOLDER):
        path = os.path.join(PROXY_FOLDER, fname)
        if not os.path.isfile(path):
            continue
        with open(path, "r", encoding="utf-8", errors="ignore") as f:
            for line in f:
                s = line.strip()
                if not s:
                    continue

                if "://" in s:
                    proxy_parts = s.split("://")
                    proxy_type = proxy_parts[0].lower()
                    auth_host = proxy_parts[1]

                    if "@" in auth_host:
                        auth, host_port = auth_host.split("@")
                        user, pwd = auth.split(":") if ":" in auth else (auth, "")
                    else:
                        host_port = auth_host
                        user, pwd = None, None

                    host, port = host_port.split(":")
                    port = int(port)

                    proxies.append((proxy_type, host, port, user, pwd))
                else:
                    parts = s.split(":")
                    try:
                        if len(parts) >= 2:
                            host = parts[0]
                            port = int(parts[1])
                            user = parts[2] if len(parts) > 2 else None
                            pwd = parts[3] if len(parts) > 3 else None
                            proxies.append(("socks5", host, port, user, pwd))
                    except Exception as e:
                        print(f"[!] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: {s} - {e}")
    return proxies


# ---------- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏-–∫–æ—Ä—Ç–µ–∂–∞ ----------
def create_proxy_tuple(proxy_info, proxy_type):
    proxy_type, host, port, user, pwd = proxy_info
    telethon_proxy_type = {
        "socks5": "socks5",
        "socks4": "socks4",
        "http": "http",
        "https": "http",
        "mtproto": "mtproto"
    }.get(proxy_type.lower(), "socks5")

    if user and pwd:
        return (telethon_proxy_type, host, port, True, user, pwd)
    else:
        return (telethon_proxy_type, host, port, True)


# ---------- –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É ----------
async def notify_admin(sender, text, client, admin_username):
    """–£–°–¢–ê–†–ï–í–®–ê–Ø –§–£–ù–ö–¶–ò–Ø - –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    if not admin_username:
        return
    try:
        await client.send_message(admin_username, f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender.first_name}: {text}")
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

# ü§ñ –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ß–ï–†–ï–ó –ë–û–¢–ê

# üîê –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–õ–£–ñ–ï–ë–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô TELEGRAM (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
async def is_telegram_service_message(sender, text):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    # üìù –û–¢–õ–ê–î–û–ß–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
    print(f"\nüîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:")
    print(f"   –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ID: {getattr(sender, 'id', '–ù–ï–¢')}")
    print(f"   –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω: {getattr(sender, 'phone', '–ù–ï–¢')}")
    print(f"   –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å username: {getattr(sender, 'username', '–ù–ï–¢')}")
    print(f"   –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏–º—è: {getattr(sender, 'first_name', '–ù–ï–¢')}")
    print(f"   –¢–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {text[:100]}...")
    
    # ‚úÖ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ID –û–¢–ü–†–ê–í–ò–¢–ï–õ–Ø
    if hasattr(sender, 'id') and sender.id:
        service_ids = [
            777000,     # Telegram Service Notifications (–æ—Å–Ω–æ–≤–Ω–æ–π)
            42777,      # Telegram Security  
            2000,       # –í–æ–∑–º–æ–∂–Ω—ã–π —Å–ª—É–∂–µ–±–Ω—ã–π ID
            1,          # –í–æ–∑–º–æ–∂–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π ID
        ]
        if sender.id in service_ids:
            print(f"‚úÖ [DEBUG] –ù–∞–π–¥–µ–Ω –ø–æ ID: {sender.id}")
            return True
    
    # ‚úÖ –ü–†–û–í–ï–†–ö–ê –¢–ï–õ–ï–§–û–ù–ê (–±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∞—è)
    if hasattr(sender, 'phone') and sender.phone:
        service_phones = ['42777', '777000']
        if sender.phone in service_phones:
            print(f"‚úÖ [DEBUG] –ù–∞–π–¥–µ–Ω –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {sender.phone}")
            return True
    
    # ‚úÖ –ü–†–û–í–ï–†–ö–ê USERNAME
    if hasattr(sender, 'username') and sender.username:
        service_usernames = [
            'telegram', 'telegramnotifications', '42777',
            'telegramservice', 'telegram_notifications'
        ]
        if sender.username.lower() in service_usernames:
            print(f"‚úÖ [DEBUG] –ù–∞–π–¥–µ–Ω –ø–æ username: {sender.username}")
            return True
    
    # ‚úÖ –ü–†–û–í–ï–†–ö–ê –ò–ú–ï–ù–ò –û–¢–ü–†–ê–í–ò–¢–ï–õ–Ø  
    if hasattr(sender, 'first_name') and sender.first_name:
        service_names = ['telegram', 'service notifications']
        name_lower = sender.first_name.lower()
        if name_lower in service_names or 'telegram' in name_lower:
            print(f"‚úÖ [DEBUG] –ù–∞–π–¥–µ–Ω –ø–æ –∏–º–µ–Ω–∏: {sender.first_name}")
            return True
    
    # ‚úÖ –ü–†–û–í–ï–†–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è)
    security_keywords = [
        # –†—É—Å—Å–∫–∏–µ
        '–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞', '–∫–æ–¥ –≤—Ö–æ–¥–∞', '–≤–∞—à –∫–æ–¥', '–ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥',
        '–Ω–æ–≤—ã–π –≤—Ö–æ–¥', '–Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', '–∫–æ–¥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
        '–Ω–µ –¥–∞–≤–∞–π—Ç–µ –∫–æ–¥', '–∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', '–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
        '–≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç', '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥',
        
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ  
        'login code', 'verification code', 'your code', 'security code',
        'new login', 'new device', 'authenticate', 'authorization',
        "don't give the code", "don't share", 'confirmation code',
        'sign in', 'log in', 'access code',
        
        # –¶–∏—Ñ—Ä–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–∫–æ–¥—ã –æ–±—ã—á–Ω–æ 4-6 —Ü–∏—Ñ—Ä)
        'code:', '–∫–æ–¥:', 'your telegram code', '–≤–∞—à –∫–æ–¥ telegram'
    ]
    
    if text:
        text_lower = text.lower()
        for keyword in security_keywords:
            if keyword in text_lower:
                print(f"‚úÖ [DEBUG] –ù–∞–π–¥–µ–Ω –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: '{keyword}'")
                return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∫–æ–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä "65076" –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏)
        import re
        if re.search(r'\b\d{4,6}\b', text) and ('telegram' in text_lower or '–∫–æ–¥' in text_lower or 'code' in text_lower):
            print(f"‚úÖ [DEBUG] –ù–∞–π–¥–µ–Ω —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–¥ –≤ —Ç–µ–∫—Å—Ç–µ")
            return True
    
    print(f"‚ùå [DEBUG] –ù–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    return False

# üö® –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –°–õ–£–ñ–ï–ë–ù–´–• –°–û–û–ë–©–ï–ù–ò–Ø–•
async def notify_telegram_service(sender, text, receiving_client):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    if not notification_bot:
        return
        
    try:
        me = await receiving_client.get_me()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        message_type = "üîê –°–õ–£–ñ–ï–ë–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï"
        if '–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞' in text.lower() or 'login code' in text.lower():
            message_type = "üîë –ö–û–î –í–•–û–î–ê"
        elif 'new login' in text.lower() or '–Ω–æ–≤—ã–π –≤—Ö–æ–¥' in text.lower():
            message_type = "üö® –ù–û–í–´–ô –í–•–û–î"
        elif 'security' in text.lower() or '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å' in text.lower():
            message_type = "‚ö†Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        account_info = {
            'phone': me.phone,
            'name': me.first_name or 'Unknown'
        }
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ (Telegram Service)
        sender_name = "Telegram Service"
        if hasattr(sender, 'first_name') and sender.first_name:
            sender_name = sender.first_name
        elif hasattr(sender, 'username') and sender.username:
            sender_name = f"@{sender.username}"
        
        sender_info = {
            'name': sender_name,
            'username': getattr(sender, 'username', 'telegram_service')
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await notification_bot.send_security_notification(
            account_info, sender_info, text, message_type
        )
        
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É–∂–µ–±–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π ----------
async def load_sessions(api_id, api_hash, proxies, accounts_per_proxy, proxy_type, admin_username):
    if not os.path.exists(SESSION_FOLDER):
        os.makedirs(SESSION_FOLDER)
        print(f"[!] –ü–∞–ø–∫–∞ {SESSION_FOLDER} —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –ø—É—Å—Ç–∞—è.")
        return []

    files = [f for f in os.listdir(SESSION_FOLDER) if f.endswith(".session")]
    if not files:
        print("[!] –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π –≤ –ø–∞–ø–∫–µ.")
        return []

    assigned = []
    if proxies:
        if len(proxies) == 1:
            assigned = [proxies[0]] * len(files)
        else:
            accounts_per_proxy = max(1, len(files) // len(proxies))
            for i, proxy in enumerate(proxies):
                start_idx = i * accounts_per_proxy
                end_idx = min((i + 1) * accounts_per_proxy, len(files))
                for j in range(start_idx, end_idx):
                    if j < len(files):
                        assigned.append(proxy)
            remaining = len(files) - len(assigned)
            if remaining > 0:
                for i in range(remaining):
                    proxy_idx = i % len(proxies)
                    assigned.append(proxies[proxy_idx])
    else:
        assigned = [None] * len(files)

    sessions = []
    for idx, fname in enumerate(files):
        name = os.path.splitext(fname)[0]
        session_path = os.path.join(SESSION_FOLDER, name)
        proxy_info = assigned[idx] if idx < len(assigned) else None

        try:
            if proxy_info:
                proxy_tuple = create_proxy_tuple(proxy_info, proxy_type)
                client = TelegramClient(session_path, int(api_id), api_hash, proxy=proxy_tuple)
            else:
                client = TelegramClient(session_path, int(api_id), api_hash)

            await client.connect()

            if not await client.is_user_authorized():
                print(f"[X] {name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
                await client.disconnect()
                continue

            me = await client.get_me()
            if proxy_info:
                proxy_type, host, port, user, pwd = proxy_info
                print(f"[+] –ó–∞–≥—Ä—É–∂–µ–Ω {me.first_name} ({me.phone}) -> {proxy_type}://{host}:{port}")
            else:
                print(f"[+] –ó–∞–≥—Ä—É–∂–µ–Ω {me.first_name} ({me.phone}) -> –±–µ–∑ –ø—Ä–æ–∫—Å–∏")

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            client.sent_users = set()
            
            # üóÇÔ∏è –î–æ–±–∞–≤–ª—è–µ–º ChatManager –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            cfg = load_config()
            if cfg.get('auto_hide_chats', False):
                client.chat_manager = ChatManager(client)
                client.chat_manager.auto_delete_delay = cfg.get('auto_delete_delay', 4)
                print(f"    üóÇÔ∏è ChatManager –ø–æ–¥–∫–ª—é—á–µ–Ω (–∞–≤—Ç–æ-—Å–∫—Ä—ã—Ç–∏–µ: ON)")

            sessions.append(client)

        except Exception as e:
            print(f"\nüî¥ [X] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {fname}: {e}\n")

    return sessions


# ---------- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ----------
async def send_messages(sessions, users, message, delay_ms, msgs_per_acc, admin_username):
    if not users:
        print("[!] –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
        return

    total_sent = 0
    total_errors = 0
    error_types = {}
    random.shuffle(users)

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    for client in sessions:
        # üîç –†–ê–°–®–ò–†–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π + –°–ª—É–∂–µ–±–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Telegram
        @client.on(events.NewMessage(incoming=True))
        async def handler(event):
            sender = await event.get_sender()
            text = event.raw_text
            
            # üîê –°–õ–£–ñ–ï–ë–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø TELEGRAM (–∫–æ–¥—ã –≤—Ö–æ–¥–∞, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
            is_telegram_service = await is_telegram_service_message(sender, text)
            
            if is_telegram_service:
                print(f"\nüö® [SECURITY] –°–ª—É–∂–µ–±–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {text[:50]}...")
                await notify_telegram_service(sender, text, event.client)
                return
            
            # üì± –û–¢–í–ï–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            if sender and hasattr(event.client, 'sent_users') and sender.id in event.client.sent_users:
                print(f"\nüì© [{sender.first_name}] -> {text}")
                await notify_admin_via_bot(sender, text, event.client)
                
                # üóëÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —É –Ω–∞—Å
                if hasattr(event.client, 'chat_manager'):
                    asyncio.create_task(event.client.chat_manager.delete_incoming_message(event.message))

    for client in sessions:
        me = await client.get_me()
        print(f"\n=== –†–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç: {me.first_name} ===")

        try:
            targets = []
            if users:
                for _ in range(min(msgs_per_acc, len(users))):
                    if users:
                        target = users.pop(random.randrange(len(users)))
                        targets.append(target)

            for target in targets:
                try:
                    unique_messages = [
                        "–ü—Ä–∏–≤–µ—Ç, —è –æ—Ç –°–µ—Ä–≥–µ—è, —Ç–µ—Å—Ç–∏—Ä—É—é —Å–≤—è–∑—å üëã –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ –æ—Ç–≤–µ—Ç!",
                        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–µ—Ä–≥–µ–π –ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å. –û—Ç–≤–µ—Ç—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ª—é–±—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
                        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —ç—Ç–æ —Ç–µ—Å—Ç –æ—Ç –°–µ—Ä–≥–µ—è. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ –≤ –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
                        "–ü—Ä–∏–≤–µ—Ç! –°–µ—Ä–≥–µ–π –ø–µ—Ä–µ–¥–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–≤—è–∑—å. –û—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∏—Ç–µ!",
                        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ø—Ä–æ–≤–µ—Ä—è—é —Å–≤—è–∑—å –ø–æ –ø–æ—Ä—É—á–µ–Ω–∏—é –°–µ—Ä–≥–µ—è. –ü—Ä–∏—à–ª–∏—Ç–µ –ª—é–±–æ–π –æ—Ç–≤–µ—Ç",
                        "–ü—Ä–∏–≤–µ—Ç, —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –°–µ—Ä–≥–µ—è ‚úåÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ö–æ—Ç—è –±—ã —Å–º–∞–π–ª–∏–∫ –≤ –æ—Ç–≤–µ—Ç",
                        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –°–µ—Ä–≥–µ–π –ø–æ–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤—è–∑—å. –û—Ç–≤–µ—Ç—å—Ç–µ —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                    ]
                    random_message = random.choice(unique_messages)

                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ ID
                    entity = await client.get_entity(target)
                    
                    # üïê –°–ù–ê–ß–ê–õ–ê —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTL –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ (–¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è)
                    cfg = load_config()
                    if cfg.get('auto_ttl_messages', False) and hasattr(client, 'chat_manager'):
                        await client.chat_manager.set_auto_delete_1_month(entity)
                    
                    # üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    sent_message = await client.send_message(entity, random_message)
                    print(f"‚úÖ [{me.first_name}] -> {target}: {random_message}")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    client.sent_users.add(entity.id)
                    
                    # üóÇÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Ç–æ–º –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                    if hasattr(client, 'chat_manager'):
                        # üóëÔ∏è –£–¥–∞–ª—è–µ–º –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É (—Ç–æ–ª—å–∫–æ —É –Ω–∞—Å)
                        asyncio.create_task(client.chat_manager._delayed_delete(sent_message))
                        # üîáüìÇ –°–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç (–º—å—é—Ç + –∞—Ä—Ö–∏–≤)
                        asyncio.create_task(client.chat_manager.hide_chat(target))
                    total_sent += 1

                except Exception as e:
                    print(f"\nüî¥ [{me.first_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {target}: {e}")
                    total_errors += 1
                    error_type = type(e).__name__
                    error_types[error_type] = error_types.get(error_type, 0) + 1

                base_delay = delay_ms / 1000.0
                jitter = random.uniform(-0.355, 0.355)
                await asyncio.sleep(max(0.1, base_delay + jitter))

        except Exception as e:
            print(f"\nüî¥ [{me.first_name}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 50)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {total_errors}")
    if error_types:
        print("\nüîç –¢–∏–ø—ã –æ—à–∏–±–æ–∫:")
        for error_type, count in error_types.items():
            print(f"   {error_type}: {count}")
    print("=" * 50)


# ---------- MAIN ----------
async def main():
    cfg = load_config()
    
    # ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    init_notification_bot()
    
    # üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç
    if notification_bot:
        await notification_bot.test_connection()

    while True:
        print("\n=== Telegram Mass Sender (Console) ===")
        print("1 - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("2 - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∫—Å–∏")
        print("3 - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É + –ø—Ä–∏—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("4 - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é")
        print("0 - –í—ã—Ö–æ–¥")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

        if choice == "1":
            edit_settings(cfg)

        elif choice == "2":
            proxies = load_proxies()
            show_proxy_info(proxies)

        elif choice == "3":
            users = load_users(cfg["target_users_file"])
            if users:
                print(f"[+] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            else:
                print("[!] –§–∞–π–ª –ø—É—Å—Ç, –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

            proxies = load_proxies()
            sessions = await load_sessions(
                cfg["api_id"],
                cfg["api_hash"],
                proxies,
                cfg["accounts_per_proxy"],
                cfg["proxy_type"],
                cfg["admin_username"]
            )

            if not sessions:
                print("[!] –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
                continue

            print(f"[+] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {len(sessions)} —Å–µ—Å—Å–∏–π")
            await send_messages(
                sessions,
                users,
                cfg["message"],
                cfg["delay_ms"],
                cfg["messages_per_account"],
                cfg["admin_username"]
            )

            print("\n[+] –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Ç–µ–ø–µ—Ä—å —Å–ª—É—à–∞—é—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ—Ç —Ç–µ—Ö, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏...")
            await asyncio.gather(*[client.run_until_disconnected() for client in sessions])

        elif choice == "4":
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
            if cfg["api_id"] and cfg["api_hash"]:
                await create_new_session(cfg["api_id"], cfg["api_hash"])
            else:
                print("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API ID –∏ API Hash –≤ –ø—É–Ω–∫—Ç–µ 1")
            input("\nüîÑ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

        elif choice == "0":
            print("–í—ã—Ö–æ–¥.")
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")


# ---------- –î–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏ ----------
def edit_settings(cfg):
    print("\n=== –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ===")
    proxy_types = ["socks5", "socks4", "http", "https", "mtproto"]

    for key in cfg:
        if key == "proxy_type":
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–∫—Å–∏: {', '.join(proxy_types)}")
            new = input(f"{key} [{cfg[key]}]: ").strip()
            if new and new.lower() in proxy_types:
                cfg[key] = new.lower()
        elif key in ["delay_ms", "messages_per_account", "accounts_per_proxy", "api_id"]:
            old = cfg[key]
            new = input(f"{key} [{old}]: ").strip()
            if new:
                try:
                    cfg[key] = int(new)
                except ValueError:
                    print(f"–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º {old}")
        elif key == "admin_username":
            old = cfg[key]
            new = input(f"{key} [{old}]: ").strip()
            if new:
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ username –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @
                if not new.startswith('@'):
                    new = '@' + new
                cfg[key] = new
        else:
            old = cfg[key]
            new = input(f"{key} [{old}]: ").strip()
            if new:
                cfg[key] = new

    save_config(cfg)
    print("[+] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n")


async def create_new_session(api_id, api_hash):
    """üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–Ω—Ü–∏–ø 20/80)"""
    print("\nüÜï === –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ô –°–ï–°–°–ò–ò ===")
    
    # –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone = input("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +1234567890): ").strip()
    if not phone.startswith('+'):
        phone = '+' + phone
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è –¥–ª—è —Å–µ—Å—Å–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –±–µ–∑ +)
    session_name = f"sessions/{phone[1:]}_telethon"
    
    print(f"üìÇ –°–µ—Å—Å–∏—è –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫: {session_name}.session")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    client = TelegramClient(session_name, api_id, api_hash)
    
    try:
        await client.connect()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ {phone}...")
        await client.send_code_request(phone)
        
        # –í–≤–æ–¥ –∫–æ–¥–∞
        code = input("üîê –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS: ").strip()
        
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        await client.sign_in(phone, code)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å
        me = await client.get_me()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è: {me.first_name} ({me.phone})")
        print(f"üìÅ –§–∞–π–ª: {session_name}.session")
        
        await client.disconnect()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ 2FA
        if "Two steps verification" in str(e) or "password" in str(e).lower():
            try:
                password = input("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ").strip()
                await client.sign_in(password=password)
                me = await client.get_me()
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å 2FA! –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è: {me.first_name} ({me.phone})")
                await client.disconnect()
                return True
            except Exception as e2:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å –ø–∞—Ä–æ–ª–µ–º 2FA: {e2}")
        
        await client.disconnect()
        return False


def show_proxy_info(proxies):
    if not proxies:
        print("[!] –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    print("\n=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∫—Å–∏ ===")
    for i, proxy in enumerate(proxies, 1):
        proxy_type, host, port, user, pwd = proxy
        auth_info = f" (auth: {user}:{pwd})" if user and pwd else " (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)"
        print(f"{i}. {proxy_type}://{host}:{port}{auth_info}")


if __name__ == "__main__":
    asyncio.run(main())