#!/usr/bin/env python3
import asyncio
import os
import sys
import json
import random
import shutil
from datetime import datetime

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from session_manager import SessionManager
from user_manager import UserManager
from message_handler import MessageHandler
from notification_bot import init_notification_bot, notification_bot
from config import load_config, save_config
from auto_responder import init_auto_responder, get_auto_responder
from phone_converter import PhoneConverter
from proxy_manager import ProxyManager
from telethon import events
from telethon.errors import FloodWaitError, RPCError, TypeNotFoundError
from telethon.tl.functions.messages import SetTypingRequest
from telethon.tl.types import SendMessageTypingAction


class AutoMassSender:
    def __init__(self):
        self.config = load_config()
        self.session_manager = SessionManager()
        self.user_manager = UserManager()
        self.message_handler = MessageHandler()
        self.proxy_manager = ProxyManager()
        self.active_sessions = []
        self.broken_sessions = []
        self.is_running = False
        self.is_sending = False
        self.check_interval = 10 * 60
        self.auto_responder = None
        self.messages_list = []
        self.first_run = True
        self.known_error_patterns = [
            "9815cec8",
            "type not found", 
            "cannot get difference",
            "constructor not found"
        ]

    async def initialize(self):
        """–ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ Mass Sender...")

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        os.makedirs("sessions", exist_ok=True)
        os.makedirs("proxies", exist_ok=True)
        os.makedirs("data", exist_ok=True)
        os.makedirs("logs", exist_ok=True)
        os.makedirs("broken_sessions", exist_ok=True)

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        await self.load_messages()
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if self.config.get("notification_bot", {}).get("enabled", False):
            bot_token = self.config.get("notification_bot", {}).get("token")
            chat_id = self.config.get("notification_bot", {}).get("admin_chat_id")
            init_notification_bot(bot_token, chat_id)
        else:
            print("‚ö†Ô∏è Notification Bot –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π
        self.active_sessions = await self.session_manager.load_sessions()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π
        await self.check_sessions_health()

        if not self.active_sessions:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π!")
            return False

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.active_sessions)} —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
        await self.initialize_auto_responder()

        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True

    def is_known_error(self, error: Exception) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π —Å–µ—Å—Å–∏–∏"""
        error_str = str(error).lower()
        return any(pattern in error_str for pattern in self.known_error_patterns)

    async def check_sessions_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π...")

        healthy_sessions = []
        check_timeout = 15  # –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        for client in self.active_sessions:
            try:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏
                me = await asyncio.wait_for(client.get_me(), timeout=check_timeout)
                if me:
                    healthy_sessions.append(client)
                    phone_display = getattr(me, 'phone', 'unknown')
                    print(f"‚úÖ –°–µ—Å—Å–∏—è {phone_display} —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞")

            except asyncio.TimeoutError:
                print(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ broken_sessions")
                await self.move_broken_session(client, "timeout")

            except TypeNotFoundError as e:
                print(f"‚ùå TypeNotFoundError - –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è")
                await self.move_broken_session(client, "type_error")

            except RPCError as e:
                if self.is_known_error(e):
                    print(f"‚ùå –ò–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏: {e}")
                    await self.move_broken_session(client, "known_error")
                else:
                    print(f"‚ùå RPC –æ—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏: {e}")
                    await self.move_broken_session(client, "rpc_error")

            except Exception as e:
                print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏: {e}")
                await self.move_broken_session(client, "general_error")

        self.active_sessions = healthy_sessions
        print(f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∑–¥–æ—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π: {len(healthy_sessions)}")

    async def move_broken_session(self, client, reason="unknown"):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±–∏—Ç–æ–π —Å–µ—Å—Å–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        try:
            session_file = None
            
            # –°–Ω–∞—á–∞–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            try:
                if hasattr(client, 'is_connected') and client.is_connected():
                    await asyncio.wait_for(client.disconnect(), timeout=5)
            except (asyncio.TimeoutError, Exception) as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–µ—Å—Å–∏—é: {e}")
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                if hasattr(client, '_connection'):
                    client._connection = None

            # –ñ–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
            await asyncio.sleep(1)

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
            if hasattr(client, 'session') and hasattr(client.session, 'filename'):
                session_file = client.session.filename
            elif hasattr(client, '_session_file'):
                session_file = client._session_file

            if session_file and os.path.exists(session_file):
                filename = os.path.basename(session_file)
                dest_path = os.path.join("broken_sessions", f"{filename}.{reason}")

                try:
                    # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª
                    shutil.move(session_file, dest_path)
                    print(f"üìÅ –°–µ—Å—Å–∏—è {filename} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ broken_sessions (–ø—Ä–∏—á–∏–Ω–∞: {reason})")
                    self.broken_sessions.append(filename)

                except (PermissionError, OSError) as e:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å, –ø—Ä–æ–±—É–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å {filename}: {e}")
                    try:
                        shutil.copy2(session_file, dest_path)
                        print(f"üìÅ –°–µ—Å—Å–∏—è {filename} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ broken_sessions")
                        # –ü–æ–º–µ—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ
                        try:
                            os.rename(session_file, f"{session_file}.to_delete")
                        except:
                            pass
                    except Exception as copy_error:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é: {copy_error}")

            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∏—Ç–æ–π —Å–µ—Å—Å–∏–∏: {e}")

        finally:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω
            try:
                if hasattr(client, 'disconnect'):
                    await client.disconnect()
            except:
                pass

    async def load_messages(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        messages_file = self.config.get("messages_file", "data/messages.txt")
        self.messages_list = []

        try:
            if os.path.exists(messages_file):
                with open(messages_file, 'r', encoding='utf-8') as f:
                    self.messages_list = [line.strip() for line in f if line.strip()]

            if not self.messages_list:
                self.messages_list = ["–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"]

            print(f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.messages_list)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            self.messages_list = ["–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"]

    def get_random_message(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not self.messages_list:
            return "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
        return random.choice(self.messages_list)

    async def get_smart_message(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        –ï—Å–ª–∏ AI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É (–ù–ï–¢ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö!)
        """
        if not self.auto_responder or not self.auto_responder.ai_enabled:
            raise Exception("‚ùå AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω - —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–∞–Ω–æ–≤!")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ AI —Å–æ–æ–±—â–µ–Ω–∏–µ
            ai_message = await self.auto_responder.generate_initial_message()
            print(f"ü§ñ AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª: {ai_message}")
            return ai_message
        
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            raise Exception(f"‚ùå AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –û—à–∏–±–∫–∞: {e}")

    async def initialize_auto_responder(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞"""
        print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞...")

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            self.auto_responder = init_auto_responder(self.config, self.session_manager)
            
            if self.auto_responder and self.auto_responder.ai_enabled:
                print("‚úÖ AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                # –í—ã–≤–æ–¥–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                stats = self.auto_responder.get_stats()
                print("\nüìã –õ–æ–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞:")
                for log_entry in stats.get('initialization_log', []):
                    print(f"   {log_entry}")
            else:
                print("‚ùå AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞: {e}")
            import traceback
            traceback.print_exc()

    async def convert_phone_numbers(self):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        print("\nüì± –≠–¢–ê–ü 1: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤")

        phones_file = self.config.get("phone_numbers_file", "data/phone_numbers.txt")

        if not os.path.exists(phones_file):
            print("‚ö†Ô∏è –§–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return 0

        phones = await self.user_manager.load_users_async(phones_file)
        if not phones:
            print("‚ö†Ô∏è –ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
            return 0

        print(f"üìû –ù–∞–π–¥–µ–Ω–æ {len(phones)} –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")

        if not self.active_sessions:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
            return 0

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ —Å–µ—Å—Å–∏—è–º
        tasks = []
        phones_per_session = len(phones) // len(self.active_sessions) + 1

        for i, client in enumerate(self.active_sessions):
            start_idx = i * phones_per_session
            end_idx = min(start_idx + phones_per_session, len(phones))
            session_phones = phones[start_idx:end_idx]

            if session_phones:
                task = self._convert_phones_batch(client, session_phones)
                tasks.append(task)

        print(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {len(phones)} –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ {len(self.active_sessions)} —Å–µ—Å—Å–∏–π")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)

        all_results = {}
        converted = []
        failed = []

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in results:
            if isinstance(result, Exception):
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {result}")
                continue

            for phone, username in result.items():
                if username:
                    converted.append(username)
                    all_results[phone] = username
            else:
                    failed.append(phone)
                    all_results[phone] = None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if converted:
            await self.user_manager.add_new_users(converted)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(converted)} –Ω–æ–º–µ—Ä–æ–≤")

        if failed:
            await self.user_manager.save_users_async("data/failed_numbers.txt", failed)
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {len(failed)} –Ω–æ–º–µ—Ä–æ–≤")

        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏
        await self.user_manager.save_users_async(phones_file, [])

        return len(converted)

    async def _convert_phones_batch(self, client, phones_list):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ –Ω–æ–º–µ—Ä–æ–≤ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–µ–π"""
        try:
            converter = PhoneConverter(client)
            results = await converter.batch_convert(phones_list, max_concurrent=2)
            return results
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –Ω–µ—É–¥–∞—á–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            return {phone: None for phone in phones_list}

    async def send_messages_to_users(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        print("\n‚úâÔ∏è –≠–¢–ê–ü 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏")

        moved = await self.user_manager.move_new_to_target()
        if moved > 0:
            print(f"üìã –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ target: {moved} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        users_data = await self.user_manager.load_all_users()
        available_users = users_data.get("available", [])

        if not available_users:
            print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return 0

        print(f"üìä –ì–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ: {len(available_users)} —Å–æ–æ–±—â–µ–Ω–∏–π")

        distribution = await self.user_manager.calculate_distribution(
            len(self.active_sessions),
            self.config.get("messages_per_account", 2),
            self.config.get("max_messages_per_account", 10)
        )

        if not distribution.get("can_send"):
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ—Å—Å–∏–π. –ù—É–∂–Ω–æ: {distribution.get('needed_sessions')}")
            return 0

        print(f"üìä –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {distribution.get('actual_per_account')}")

        session_messages = {}
        working_sessions = []

        for client in self.active_sessions:
            try:
                me = await asyncio.wait_for(client.get_me(), timeout=10)
                session_messages[client] = await self.get_smart_message()
                print(f"üí¨ {me.first_name}: {session_messages[client][:50]}...")
                working_sessions.append(client)
            except Exception as e:
                if "AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" in str(e) or "AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω" in str(e):
                    print(f"üõë {str(e)}")
                    print("üõ°Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–∞–Ω–æ–≤!")
                    return 0
                print(f"‚ùå –°–µ—Å—Å–∏—è –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")
                await self.move_broken_session(client, "send_check_failed")

        if not working_sessions:
            print("‚ùå –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return 0

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        self.active_sessions = working_sessions

        sent_count = await self.message_handler.send_messages(
            working_sessions,
            available_users,
            session_messages,
            self.config.get("delay_ms", 1000),
            distribution.get("actual_per_account", 1)
        )

        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {sent_count}")

        await self.user_manager.save_users_async(
            self.config["target_users_file"],
            []
        )

        return sent_count

    async def check_messages_from_processed(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüëÄ –≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç processed_users")

        users_data = await self.user_manager.load_all_users()
        processed_users = users_data.get("processed", [])

        if not processed_users:
            print("‚ö†Ô∏è –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return

        print(f"üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {len(processed_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        for client in self.active_sessions:
            try:
                if not hasattr(client, 'sent_users'):
                    client.sent_users = set()

                for user in processed_users:
                    try:
                        entity = await asyncio.wait_for(client.get_entity(user), timeout=10)
                        client.sent_users.add(entity.id)
                    except Exception:
                        continue
            
                me = await client.get_me()
                print(f"‚úÖ {me.first_name}: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç {len(client.sent_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

    async def setup_message_listeners(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Å–ª—É—à–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print("\nüéß –≠–¢–ê–ü 4: –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")

        sessions_to_remove = []

        for client in self.active_sessions:
            try:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                if hasattr(client, '_message_handlers'):
                    for handler in client._message_handlers:
                        client.remove_event_handler(handler)

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                async def create_handler(current_client):
                    async def handler(event):
                        try:
                            await self.handle_incoming_message(current_client, event)
                        except Exception as e:
                            if self.is_known_error(e):
                                print(f"‚ö†Ô∏è –ò–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
                            else:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

                    return handler

                handler = await create_handler(client)
                client.add_event_handler(handler, events.NewMessage(incoming=True))

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                if not hasattr(client, '_message_handlers'):
                    client._message_handlers = []
                client._message_handlers.append(handler)

                me = await client.get_me()
                print(f"‚úÖ {me.first_name}: –ø—Ä–æ—Å–ª—É—à–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞")

            except (TypeNotFoundError, RPCError) as e:
                if self.is_known_error(e):
                    print(f"‚ö†Ô∏è –ò–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏, –ø–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                    sessions_to_remove.append(client)
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Å–ª—É—à–∫–∏: {e}")

        # –£–¥–∞–ª—è–µ–º –±–∏—Ç—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞
        for client in sessions_to_remove:
            await self.move_broken_session(client, "listener_setup_failed")
            if client in self.active_sessions:
                self.active_sessions.remove(client)

    async def handle_incoming_message(self, client, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            sender = await event.get_sender()
            if not sender or not hasattr(client, 'sent_users'):
                return

            if sender.id not in client.sent_users:
                return

            text = event.raw_text
            me = await client.get_me()
            timestamp = datetime.now().strftime("%H:%M:%S")

            print(f"\n[{timestamp}] üì© {sender.first_name} -> {me.first_name}: {text}")

            if notification_bot:
                account_info = {'phone': me.phone or 'Unknown', 'name': me.first_name or 'Unknown'}
                sender_info = {'name': sender.first_name or 'Unknown', 'username': sender.username or 'unknown'}
                asyncio.create_task(notification_bot.send_notification(account_info, sender_info, text))

            if self.auto_responder:
                asyncio.create_task(self.handle_auto_response(client, sender, text))

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞
            try:
                await event.message.delete(revoke=False)
            except:
                pass

        except (TypeNotFoundError, RPCError) as e:
            if self.is_known_error(e):
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—É—é –æ—à–∏–±–∫—É: {e}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def handle_auto_response(self, client, sender, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞"""
        try:
            response = await self.auto_responder.handle_message(
                str(sender.id),
                text,
                phone=getattr(sender, 'phone', None),
                username=getattr(sender, 'username', None),
                first_name=getattr(sender, 'first_name', None)
            )

            if response:
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..." –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
                try:
                    await client.send_read_acknowledge(sender.id)  # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                    await client(SetTypingRequest(
                        peer=sender.id, 
                        action=SendMessageTypingAction()
                    ))
                    await asyncio.sleep(1.5)  # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ typing action
                
                await client.send_message(sender.id, response)
                print(f"ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç -> {sender.first_name}: {response[:50]}...")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞: {e}")

    async def main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        print("\nüîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        self.is_running = True

        while self.is_running:
            try:
                print(f"\n{'=' * 60}")
                print(f"‚è∞ –ù–ê–ß–ê–õ–û –¶–ò–ö–õ–ê - {datetime.now().strftime('%H:%M:%S')}")
                print(f"{'=' * 60}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π
                await self.check_sessions_health()

                if not self.active_sessions:
                    print("‚ùå –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª")
                    await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                    continue

                converted = await self.convert_phone_numbers()
                sent = await self.send_messages_to_users()
                await self.check_messages_from_processed()
                await self.setup_message_listeners()

                print(f"\nüìä –ò–¢–û–ì–ò –¶–ò–ö–õ–ê:")
                print(f"   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {converted} –Ω–æ–º–µ—Ä–æ–≤")
                print(f"   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent} —Å–æ–æ–±—â–µ–Ω–∏–π")
                print(f"   ‚Ä¢ –†–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π: {len(self.active_sessions)}")
                print(f"   ‚Ä¢ –ù–µ—Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π: {len(self.broken_sessions)}")

                if notification_bot and (converted > 0 or sent > 0):
                    await notification_bot.send_security_notification(
                        {"phone": "System", "name": "AutoMassSender"},
                        {"name": "Cycle", "username": "system"},
                        f"–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {converted}, –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}, –°–µ—Å—Å–∏–π: {len(self.active_sessions)}",
                        "‚úÖ –¶–ò–ö–õ –ó–ê–í–ï–†–®–ï–ù"
                    )

                print(f"\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {self.check_interval // 60} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
                await asyncio.sleep(self.check_interval)

            except KeyboardInterrupt:
                print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                import traceback
                traceback.print_exc()
                await asyncio.sleep(60)

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        success = await self.initialize()
        if not success:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
            return
            
            print("\n" + "=" * 60)
        print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô MASS SENDER –ó–ê–ü–£–©–ï–ù")
        print(f"‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {self.check_interval // 60} –º–∏–Ω—É—Ç")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("=" * 60)

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            await self.main_loop()
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self.shutdown()

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        print("\nüì¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.is_running = False

        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
        for client in self.active_sessions:
            try:
                # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                if hasattr(client, '_message_handlers'):
                    for handler in client._message_handlers:
                        try:
                            client.remove_event_handler(handler)
                        except:
                            pass
        
                await client.disconnect()
            except:
                pass

        if notification_bot:
            try:
                await notification_bot.send_shutdown_notification()
            except:
                pass
            try:
                await notification_bot.close_session()
            except:
                pass

        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "=" * 60)
    print("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô MASS SENDER")
    print("=" * 60)

    sender = AutoMassSender()

    while True:
        print("\n1. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º")
        print("2. üß™ –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
        print("3. üßπ –û—á–∏—Å—Ç–∏—Ç—å broken_sessions")
        print("4. ‚ùå –í—ã—Ö–æ–¥")
        print("-" * 40)

        choice = input("–í—ã–±–æ—Ä: ").strip()

        if choice == "1":
            await sender.run()
            break
        elif choice == "2":
            success = await sender.initialize()
            if success:
                print("\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")
                await sender.convert_phone_numbers()
                await sender.send_messages_to_users()
                await sender.check_messages_from_processed()
                await sender.setup_message_listeners()
                print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
                await sender.shutdown()
        elif choice == "3":
            # –û—á–∏—Å—Ç–∫–∞ broken_sessions
            broken_dir = "broken_sessions"
            if os.path.exists(broken_dir):
                try:
                    shutil.rmtree(broken_dir)
                    os.makedirs(broken_dir, exist_ok=True)
                    print("üßπ –ü–∞–ø–∫–∞ broken_sessions –æ—á–∏—â–µ–Ω–∞")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            else:
                print("‚ö†Ô∏è –ü–∞–ø–∫–∞ broken_sessions –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        elif choice == "4":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
