#!/usr/bin/env python3
"""
MASS SENDER –° –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï–ú –ß–ê–¢–ê–ú–ò
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã —Å –º–µ–Ω—é –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
"""
import asyncio
import os
import sys
from datetime import datetime

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from session_manager import SessionManager
from user_manager import UserManager
from message_handler import MessageHandler
from notification_bot import init_notification_bot, notification_bot
from config import load_config, save_config
import subprocess
import sys



class MassSender:
    def __init__(self):
        self.config = load_config()
        self.session_manager = SessionManager()
        self.user_manager = UserManager()
        self.message_handler = MessageHandler()
        self.is_running = False
        self.active_sessions = []

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mass Sender...")

        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
        os.makedirs("sessions", exist_ok=True)
        os.makedirs("proxies", exist_ok=True)
        os.makedirs("data", exist_ok=True)
        os.makedirs("logs", exist_ok=True)

        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        for file in ["target_users.txt", "processed_users.txt", "new_users.txt", "phone_numbers.txt"]:
            filepath = os.path.join("data", file)
            if not os.path.exists(filepath):
                with open(filepath, "w", encoding="utf-8") as f:
                    pass

        init_notification_bot()

        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    async def show_menu(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã"""
        while True:
            print("\n" + "=" * 60)
            print("ü§ñ MASS SENDER")
            print("=" * 60)
            print("1. üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
            print("2. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
            print("3. üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏–∏")
            print("4. üì± –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤")
            print("5. ‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            print("6. üì• –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä—É—á–Ω—É—é")
            print("7. üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã")
            print("8. üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏")
            print("0. ‚ùå –í—ã—Ö–æ–¥")
            print("=" * 60)

            try:
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ").strip()

                if choice == "1":
                    await self.start_sending_campaign()
                elif choice == "2":
                    await self.show_system_status()
                elif choice == "3":
                    await self.reload_sessions()
                elif choice == "4":
                    await self.convert_phone_numbers()
                elif choice == "5":
                    self.edit_settings()
                elif choice == "6":
                    await self.add_users_manually()
                elif choice == "7":
                    await self.check_new_resources()
                elif choice == "8":
                    await self.chat_management()
                elif choice == "0":
                    await self.shutdown()
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            except KeyboardInterrupt:
                print("\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                await self.shutdown()
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


    async def start_sending_campaign(self):
        """–ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ (—á–∏—Å—Ç—ã–π –≤—ã–≤–æ–¥)"""
        print("\nüéØ –ó–ê–ü–£–°–ö –†–ê–°–°–´–õ–ö–ò")
        print("=" * 50)

        sessions = await self.session_manager.load_sessions()
        if not sessions:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π!")
            return

        print(f"‚úÖ –°–µ—Å—Å–∏–∏: {len(sessions)}")

        users_data = await self.user_manager.load_all_users()
        available_users = users_data["available"]

        if not available_users:
            print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!")
            return

        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(available_users)}")

        distribution = await self.user_manager.calculate_distribution(
            len(sessions),
            self.config["messages_per_account"],
            self.config["max_messages_per_account"]
        )
        confirm = input(f"\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å {distribution['available_users']} —Å–æ–æ–±—â–µ–Ω–∏–π? (y/n): ").lower()
        if confirm != 'y':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            return
        print("\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...")
        sent_count = await self.message_handler.send_messages(
            sessions,
            available_users,
            self.config["message"],
            self.config["delay_ms"],
            distribution["actual_per_account"]
        )

        print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("üí¨ –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ Telegram-–±–æ—Ç–∞")



    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        print("\nüì¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
        await self.background_listener.stop_listener()

        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
        sessions = self.session_manager.sessions + self.active_sessions
        for client in sessions:
            try:
                await client.disconnect()
            except:
                pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏
        if notification_bot:
            await notification_bot.send_shutdown_notification()

        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    async def show_system_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´")
        print("=" * 50)

        sessions = await self.session_manager.load_sessions()
        users_data = await self.user_manager.load_all_users()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π
        session_stats = await self.session_manager.get_session_stats()
        print(f"üîß –°–µ—Å—Å–∏–∏: {session_stats['total']} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {session_stats['active']})")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        print(f"   ‚Ä¢ –¶–µ–ª–µ–≤—ã–µ: {len(users_data['target'])}")
        print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ: {len(users_data['processed'])}") 
        print(f"   ‚Ä¢ –ù–æ–≤—ã–µ: {len(users_data['new'])}")
        print(f"   ‚Ä¢ –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: {len(users_data['phones'])}")
        print(f"   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(users_data['available'])}")




        print("=" * 50)
        if sessions:
            distribution = await self.user_manager.calculate_distribution(
                len(sessions),
                self.config["messages_per_account"]
            )
            self._print_distribution_info(distribution)

        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        bot_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if notification_bot else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        print(f"ü§ñ –ë–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {bot_status}")

        print("=" * 50)

    def _print_distribution_info(self, distribution):
        """–ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏"""
        print(f"\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï:")
        print(f"   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {distribution['available_users']}")
        print(f"   ‚Ä¢ –¢–µ–∫—É—â–∏–µ —Å–µ—Å—Å–∏–∏: {distribution['current_sessions']}")
        print(f"   ‚Ä¢ –ú–∞–∫—Å. –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {distribution['max_per_account']}")
        print(f"   ‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {'‚úÖ –î–ê' if distribution['can_send'] else '‚ùå –ù–ï–¢'}")

        if distribution['can_send']:
            print(f"   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {distribution['actual_per_account']}")
        else:
            print(f"   ‚Ä¢ –ù—É–∂–Ω–æ —Å–µ—Å—Å–∏–π: {distribution['needed_sessions']}")

    async def reload_sessions(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏–∏"""
        print("\nüîÑ –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –°–ï–°–°–ò–ô")
        print("=" * 50)

        old_count = len(self.session_manager.sessions)
        sessions = await self.session_manager.load_sessions(force_reload=True)
        new_count = len(sessions)

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–µ—Å—Å–∏–π: {new_count}")
        if new_count > old_count:
            print(f"üéâ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π: {new_count - old_count}")

        return sessions

    async def convert_phone_numbers(self):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"""
        print("\nüì± –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –ù–û–ú–ï–†–û–í")
        print("=" * 50)

        phones = await self.user_manager.load_users_async(self.config["phone_numbers_file"])
        if not phones:
            print("‚ùå –ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!")
            print("üí° –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä–∞ –≤ data/phone_numbers.txt")
            return

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤: {len(phones)}")
        print(f"üìã –ü–µ—Ä–≤—ã–µ 5: {', '.join(phones[:5])}{'...' if len(phones) > 5 else ''}")

        confirm = input("\n–ù–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é? (y/n): ").lower()
        if confirm != 'y':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            return

        converted = await self.user_manager.convert_phones_to_usernames()
        if converted > 0:
            print(f"\n‚úÖ –°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {converted} –Ω–æ–º–µ—Ä–æ–≤")

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ —Ü–µ–ª–µ–≤—ã–µ
            move = input("–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ü–µ–ª–µ–≤—ã–µ? (y/n): ").lower()
            if move == 'y':
                moved = await self.user_manager.move_new_to_target()
                print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ: {moved} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞")

    def edit_settings(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        print("\n‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò")
        print("=" * 50)

        cfg = load_config()
        print("–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")

        for key, value in cfg.items():
            if key not in ['last_session_check', 'last_user_check']:
                print(f"   {key}: {value}")

        print("\n–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å):")

        for key in cfg:
            if key in ['api_id', 'api_hash', 'admin_username', 'message']:
                new_val = input(f"{key} [{cfg[key]}]: ").strip()
                if new_val:
                    cfg[key] = new_val
            elif key in ['delay_ms', 'messages_per_account', 'max_messages_per_account',
                         'accounts_per_proxy', 'check_interval_minutes']:
                try:
                    new_val = input(f"{key} [{cfg[key]}]: ").strip()
                    if new_val:
                        cfg[key] = int(new_val)
                except:
                    pass
            elif key in ['auto_hide_chats', 'auto_ttl_messages',
                         'auto_check_new_sessions', 'auto_check_new_users']:
                new_val = input(f"{key} [{'–î–∞' if cfg[key] else '–ù–µ—Ç'}] (y/n): ").strip().lower()
                if new_val:
                    cfg[key] = (new_val == 'y')

        save_config(cfg)
        self.config = cfg
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

    async def add_users_manually(self):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä—É—á–Ω—É—é"""
        print("\nüì• –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        print("=" * 50)

        print("–í–≤–µ–¥–∏—Ç–µ username'—ã (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, Ctrl+D –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):")
        print("–§–æ—Ä–º–∞—Ç: @username –∏–ª–∏ username")

        users = []
        try:
            while True:
                line = input().strip()
                if line:
                    if not line.startswith('@'):
                        line = '@' + line
                    users.append(line)
        except EOFError:
            pass

        if not users:
            print("‚ùå –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        await self.user_manager.add_new_users(users)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        print(f"üìã –î–æ–±–∞–≤–ª–µ–Ω—ã: {', '.join(users[:5])}{'...' if len(users) > 5 else ''}")

    async def check_new_resources(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –†–ï–°–£–†–°–û–í")
        print("=" * 50)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏
        print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏...")
        sessions = await self.session_manager.reload_sessions_if_needed()
        print(f"‚úÖ –°–µ—Å—Å–∏–∏: {len(sessions)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("üì• –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        has_new_users = await self.user_manager.check_for_new_users()
        if has_new_users:
            added = await self.user_manager.move_new_to_target()
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {added}")
        else:
            print("‚ùå –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞
        print("üì± –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞...")
        has_new_phones = await self.user_manager.check_for_new_phones()
        if has_new_phones:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞")
            convert = input("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å? (y/n): ").lower()
            if convert == 'y':
                await self.convert_phone_numbers()
        else:
            print("‚ùå –ù–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç")

        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")



    async def chat_management(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏"""
        print("\nüóÇÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ê–¢–ê–ú–ò")
        print("=" * 50)
        print("1. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤")
        print("2. üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —á–∞—Ç–æ–≤")
        print("3. üîô –ù–∞–∑–∞–¥")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ").strip()

        if choice == "1":
            sessions = await self.session_manager.load_sessions()
            if not sessions:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
                return

            print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ß–ê–¢–û–í –ü–û –°–ï–°–°–ò–Ø–ú")
            print("-" * 50)

            for i, client in enumerate(sessions, 1):
                try:
                    me = await client.get_me()
                    phone_display = f"+{me.phone}" if me.phone else "No phone"

                    if hasattr(client, 'chat_manager'):
                        stats = client.chat_manager.get_optimization_stats()
                        print(f"{i}. {me.first_name or 'Unknown'} ({phone_display}):")
                        print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤: {stats['processed_chats_count']}")
                        print(f"   ‚Ä¢ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ API –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['saved_api_calls']}")
                    else:
                        print(f"{i}. {me.first_name or 'Unknown'} ({phone_display}):")
                        print(f"   ‚Ä¢ ChatManager –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

                except Exception as e:
                    print(f"{i}. ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

                print()

        elif choice == "2":
            sessions = await self.start_listener_console()
            if not sessions:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
                return

            total_cleared = 0
            cleared_sessions = 0

            print("\nüóëÔ∏è –û–ß–ò–°–¢–ö–ê –ö–≠–®–ê –ß–ê–¢–û–í")
            print("-" * 50)

            for client in sessions:
                try:
                    me = await client.get_me()
                    if hasattr(client, 'chat_manager'):
                        cleared = client.chat_manager.clear_processed_chats_cache()
                        if cleared > 0:
                            total_cleared += cleared
                            cleared_sessions += 1
                            print(f"‚úÖ {me.first_name}: –æ—á–∏—â–µ–Ω–æ {cleared} —á–∞—Ç–æ–≤")
                        else:
                            print(f"‚ÑπÔ∏è {me.first_name}: –∫—ç—à –ø—É—Å—Ç")
                    else:
                        print(f"‚ùå {me.first_name}: ChatManager –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

            print(f"\nüìä –ò—Ç–æ–≥: –æ—á–∏—â–µ–Ω–æ {total_cleared} —á–∞—Ç–æ–≤ –≤ {cleared_sessions} —Å–µ—Å—Å–∏—è—Ö")

        elif choice == "3":
            return
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ó–ê–ì–†–£–ó–ö–ê MASS SENDER...")

    sender = None
    try:
        sender = MassSender()
        await sender.initialize()
        await sender.show_menu()

    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if notification_bot:
            await notification_bot.send_security_notification(
                {"phone": "System", "name": "MassSender"},
                {"name": "Error", "username": "system"},
                f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}",
                "üö® –°–ò–°–¢–ï–ú–ù–ê–Ø –û–®–ò–ë–ö–ê"
            )
    finally:
        if sender:
            await sender.shutdown()

if __name__ == "__main__":
    asyncio.run(main())
