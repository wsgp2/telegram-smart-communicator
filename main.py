#!/usr/bin/env python3
import asyncio
import os
import sys
import json
import random
import shutil
from datetime import datetime

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from session_manager import SessionManager
from user_manager import UserManager
from message_handler import MessageHandler
from notification_bot import init_notification_bot, notification_bot
from config import load_config, save_config
from auto_responder import init_auto_responder, get_auto_responder
from phone_converter import PhoneConverter
from proxy_manager import ProxyManager
from telethon import events
from telethon.errors import FloodWaitError, RPCError, TypeNotFoundError, MsgidDecreaseRetryError
from telethon.tl.functions.messages import SetTypingRequest
from telethon.tl.types import SendMessageTypingAction


class AutoMassSender:
    def __init__(self):
        self.config = load_config()
        self.session_manager = SessionManager()
        self.user_manager = UserManager()
        self.message_handler = MessageHandler()
        self.proxy_manager = ProxyManager()
        self.active_sessions = []
        self.broken_sessions = []
        self.all_time_processed_users = {}
        self.session_processed_users = {}
        self.processed_users_file = "data/all_processed_users.json"
        self.victim_phones_file = "data/victim_phones.txt"
        self.session_phone_map = {}  # –ö–∞—Ä—Ç–∞ ID –∞–∫–∫–∞—É–Ω—Ç–∞ -> –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        self.is_running = False
        self.is_sending = False
        self.check_interval = 10 * 60
        self.auto_responder = None
        self.messages_list = []
        self.first_run = True

        self.load_processed_users_history()
        self.load_victim_phones()

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–µ—Å—Å–∏—è–º
        self.session_processed_users = {}

        self.known_error_patterns = [
            "9815cec8",
            "type not found",
            "cannot get difference",
            "constructor not found",
            "auth key duplicated",
            "session revoked",
            "user deactivated",
            "auth key invalid",
            "msgiddecrease",
            "internal issues",
            "too many requests",
            "sendmessagerequest",
            "timestamp outdated",
            "persistenttimestamp",
            "connection reset",
            "server closed"  ,
            "GeneralProxyError: Socket error:"
        ]

    def load_victim_phones(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∂–µ—Ä—Ç–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        self.victim_phones = set()
        try:
            if os.path.exists(self.victim_phones_file):
                with open(self.victim_phones_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line:
                            self.victim_phones.add(line)
                print(f"üì± –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.victim_phones)} –Ω–æ–º–µ—Ä–æ–≤ –∂–µ—Ä—Ç–≤")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–º–µ—Ä–æ–≤ –∂–µ—Ä—Ç–≤: {e}")
            self.victim_phones = set()

    def save_victim_phones(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∂–µ—Ä—Ç–≤ –≤ —Ñ–∞–π–ª"""
        try:
            os.makedirs("data", exist_ok=True)
            with open(self.victim_phones_file, 'w', encoding='utf-8') as f:
                for phone in sorted(self.victim_phones):
                    f.write(f"{phone}\n")
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.victim_phones)} –Ω–æ–º–µ—Ä–æ–≤ –∂–µ—Ä—Ç–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ –∂–µ—Ä—Ç–≤: {e}")

    def add_victim_phone(self, phone):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∂–µ—Ä—Ç–≤—ã"""
        if phone:
            self.victim_phones.add(phone)
            self.save_victim_phones()





    async def initialize(self):
        """–ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ Mass Sender...")

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        os.makedirs("sessions", exist_ok=True)
        os.makedirs("proxies", exist_ok=True)
        os.makedirs("data", exist_ok=True)
        os.makedirs("logs", exist_ok=True)
        os.makedirs("broken_sessions", exist_ok=True)

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        await self.load_messages()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if self.config.get("notification_bot", {}).get("enabled", False):
            bot_token = self.config.get("notification_bot", {}).get("token")
            chat_id = self.config.get("notification_bot", {}).get("admin_chat_id")
            init_notification_bot(bot_token, chat_id)
        else:
            print("‚ö†Ô∏è Notification Bot –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π
        self.active_sessions = await self.session_manager.load_sessions()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π —Å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ–º –±–∏—Ç—ã—Ö
        await self.check_sessions_health()

        # –û—á–∏—Å—Ç–∫–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö ID –∏–∑ –∫—ç—à–∞ –∏ target_users
        await self.clean_numeric_ids()

        if not self.active_sessions:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π!")
            return False

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.active_sessions)} —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
        await self.initialize_auto_responder()

        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True

    def is_known_error(self, error: Exception) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π —Å–µ—Å—Å–∏–∏"""
        error_str = str(error).lower()
        return any(pattern in error_str for pattern in self.known_error_patterns)

    async def check_sessions_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π...")

        healthy_sessions = []
        check_timeout = 10

        for i, client in enumerate(self.active_sessions[:]):
            try:
                print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ {i + 1}/{len(self.active_sessions)}...", end='\r')

                if not client.is_connected():
                    await client.connect()

                me = await asyncio.wait_for(client.get_me(), timeout=check_timeout)
                if me:
                    healthy_sessions.append(client)

                    # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                    account_id = str(me.id)
                    phone_display = getattr(me, 'phone', 'unknown')

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

                    name_display = getattr(me, 'first_name', 'unknown')
                    username_display = getattr(me, 'username', name_display)

                    print(f"‚úÖ –°–µ—Å—Å–∏—è {name_display} ({phone_display}) —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞                    ")

                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                    session_id = f"{me.id}_{me.phone}"
                    if session_id not in self.session_processed_users:
                        self.session_processed_users[session_id] = set()

            except (asyncio.TimeoutError, ConnectionError, RPCError, Exception) as e:
                error_reason = type(e).__name__
                session_name = "unknown"

                if hasattr(client, 'session') and hasattr(client.session, 'filename'):
                    session_name = os.path.basename(client.session.filename)
                elif hasattr(client, '_session_file'):
                    session_name = os.path.basename(client._session_file)

                if "socks5://" in str(e) or "proxy" in session_name.lower():
                    error_reason = "proxy_error"
                    print(f"‚ùå –°–µ—Å—Å–∏—è {session_name} —Å –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø–µ—Ä–µ–º–µ—â–∞–µ–º")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏ {i + 1}: {str(e)[:50]} - –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ broken_sessions")

                await self.move_broken_session(client, error_reason, i)

                if client in self.active_sessions:
                    self.active_sessions.remove(client)

        self.active_sessions = healthy_sessions

        print("\n" + "=" * 60)
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –°–ï–°–°–ò–ô:")
        print(f"   ‚úÖ –†–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π: {len(healthy_sessions)}")
        print(f"   ‚ùå –ë–∏—Ç—ã—Ö —Å–µ—Å—Å–∏–π: {len(self.broken_sessions)}")
        print("=" * 60)

    async def move_broken_session(self, client, reason="unknown", session_index=None):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±–∏—Ç–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            session_file = None

            try:
                if hasattr(client, 'is_connected') and client.is_connected():
                    await asyncio.wait_for(client.disconnect(), timeout=3)
            except:
                pass

            if hasattr(client, '_connection'):
                client._connection = None

            await asyncio.sleep(0.5)

            if hasattr(client, 'session') and hasattr(client.session, 'filename'):
                session_file = client.session.filename
            elif hasattr(client, '_session_file'):
                session_file = client._session_file

            if session_file and os.path.exists(session_file):
                filename = os.path.basename(session_file)
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                dest_path = os.path.join("broken_sessions", f"{filename}_{reason}_{timestamp}")

                for attempt in range(3):
                    try:
                        shutil.move(session_file, dest_path)
                        print(f"   üìÅ –°–µ—Å—Å–∏—è {filename} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ broken_sessions/{reason}")
                        self.broken_sessions.append(filename)
                        break
                    except (PermissionError, OSError) as e:
                        if attempt == 2:
                            try:
                                shutil.copy2(session_file, dest_path)
                                print(f"   üìÅ –°–µ—Å—Å–∏—è {filename} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ broken_sessions/{reason}")
                                try:
                                    os.rename(session_file, f"{session_file}.to_delete")
                                except:
                                    pass
                            except:
                                print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ—Å—Å–∏—é {filename}")
                        else:
                            await asyncio.sleep(1)
            else:
                if session_index is not None:
                    print(f"   ‚ö†Ô∏è –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_index + 1} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∏—Ç–æ–π —Å–µ—Å—Å–∏–∏: {str(e)[:50]}")

    async def clean_numeric_ids(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö ID –∏–∑ –∫—ç—à–∞ –∏ target_users"""
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö ID...")
        cleaned_count = 0

        cache_file = "data/phone_cache.json"
        if os.path.exists(cache_file):
            try:
                with open(cache_file, 'r', encoding='utf-8') as f:
                    cache = json.load(f)

                original_size = len(cache)
                cleaned_cache = {
                    phone: identifier
                    for phone, identifier in cache.items()
                    if identifier and (
                            identifier.startswith('@') or
                            not identifier.isdigit()
                    )
                }

                if len(cleaned_cache) < original_size:
                    with open(cache_file, 'w', encoding='utf-8') as f:
                        json.dump(cleaned_cache, f, ensure_ascii=False, indent=2)
                    cleaned_count = original_size - len(cleaned_cache)
                    print(f"   üì¶ –£–¥–∞–ª–µ–Ω–æ {cleaned_count} —Ü–∏—Ñ—Ä–æ–≤—ã—Ö ID –∏–∑ –∫—ç—à–∞")

            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")

        user_files = [
            self.config.get("target_users_file", "data/target_users.txt"),
            "data/available_users.txt",
            "data/new_users.txt"
        ]

        for file_path in user_files:
            if os.path.exists(file_path):
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        users = [line.strip() for line in f if line.strip()]

                    original_count = len(users)
                    filtered_users = [
                        user for user in users
                        if user.startswith('@') or not user.isdigit()
                    ]

                    if len(filtered_users) < original_count:
                        with open(file_path, 'w', encoding='utf-8') as f:
                            f.write('\n'.join(filtered_users))
                        removed = original_count - len(filtered_users)
                        print(f"   üìù –£–¥–∞–ª–µ–Ω–æ {removed} —Ü–∏—Ñ—Ä–æ–≤—ã—Ö ID –∏–∑ {os.path.basename(file_path)}")
                        cleaned_count += removed

                except Exception as e:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {file_path}: {e}")

        if cleaned_count > 0:
            print(f"‚úÖ –í—Å–µ–≥–æ –æ—á–∏—â–µ–Ω–æ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö ID: {cleaned_count}")
        else:
            print("   ‚úÖ –¶–∏—Ñ—Ä–æ–≤—ã—Ö ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        return cleaned_count

    async def convert_phone_numbers(self):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Ü–∏—Ñ—Ä–æ–≤—ã—Ö ID –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\nüì± –≠–¢–ê–ü 1: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤")

        phones_file = self.config.get("phone_numbers_file", "data/phone_numbers.txt")

        if not os.path.exists(phones_file):
            print("‚ö†Ô∏è –§–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return 0

        phones = await self.user_manager.load_users_async(phones_file)
        if not phones:
            print("‚ö†Ô∏è –ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
            return 0

        print(f"üìû –ù–∞–π–¥–µ–Ω–æ {len(phones)} –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")

        if not self.active_sessions:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
            return 0

        tasks = []
        phones_per_session = len(phones) // len(self.active_sessions) + 1

        for i, client in enumerate(self.active_sessions):
            start_idx = i * phones_per_session
            end_idx = min(start_idx + phones_per_session, len(phones))
            session_phones = phones[start_idx:end_idx]

            if session_phones:
                task = self._convert_phones_batch(client, session_phones, i)
                tasks.append(task)

        print(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {len(phones)} –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ {len(self.active_sessions)} —Å–µ—Å—Å–∏–π")

        results = await asyncio.gather(*tasks, return_exceptions=True)

        all_results = {}
        converted = []
        failed = []
        numeric_ids_filtered = 0

        # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π
        successful_conversions_file = "data/successful_conversions.txt"

        for result in results:
            if isinstance(result, Exception):
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {result}")
                continue

            if isinstance(result, dict):
                for phone, identifier in result.items():
                    if identifier:
                        if identifier.startswith('@'):
                            converted.append(identifier)
                            all_results[phone] = identifier
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
                            self._save_successful_conversion(phone, identifier, successful_conversions_file)
                        elif not identifier.isdigit():
                            converted.append(identifier)
                            all_results[phone] = identifier
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é (–¥–∞–∂–µ –±–µ–∑ @)
                            self._save_successful_conversion(phone, identifier, successful_conversions_file)
                        else:
                            numeric_ids_filtered += 1
                            print(f"   üö´ –ü—Ä–æ–ø—É—â–µ–Ω —Ü–∏—Ñ—Ä–æ–≤–æ–π ID: {identifier}")
                    else:
                        failed.append(phone)
                        all_results[phone] = None

        if converted:
            await self.user_manager.add_new_users(converted)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(converted)} –Ω–æ–º–µ—Ä–æ–≤")

        if numeric_ids_filtered > 0:
            print(f"üö´ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö ID: {numeric_ids_filtered}")

        if failed:
            await self.user_manager.save_users_async("data/failed_numbers.txt", failed)
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {len(failed)} –Ω–æ–º–µ—Ä–æ–≤")

        await self.user_manager.save_users_async(phones_file, [])

        print(f"üìù –£—Å–ø–µ—à–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {successful_conversions_file}")

        return len(converted)

    def _save_successful_conversion(self, phone, username, filename):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É—Å–ø–µ—à–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
        try:
            os.makedirs(os.path.dirname(filename), exist_ok=True)
            with open(filename, 'a', encoding='utf-8') as f:
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                f.write(f"{phone}:{username}\n")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")

    async def _convert_phones_batch(self, client, phones_list, session_index):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Å–µ—Å—Å–∏–∏"""
        try:
            try:
                me = await asyncio.wait_for(client.get_me(), timeout=5)
                if not me:
                    raise Exception("–°–µ—Å—Å–∏—è –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            except Exception as e:
                print(f"‚ùå –°–µ—Å—Å–∏—è {session_index + 1} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
                await self.move_broken_session(client, "convert_check_failed", session_index)
                return {phone: None for phone in phones_list}

            converter = PhoneConverter(client)
            results = await converter.batch_convert(phones_list, max_concurrent=2)

            if converter.stats.get('session_errors', 0) > 0:
                print(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è {session_index + 1} –∏–º–µ–µ—Ç –æ—à–∏–±–∫–∏, –ø–æ–º–µ—á–∞–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

            return results

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞ —Å–µ—Å—Å–∏–µ–π {session_index + 1}: {e}")
            return {phone: None for phone in phones_list}

    async def load_messages(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        messages_file = self.config.get("messages_file", "data/messages.txt")
        self.messages_list = []

        try:
            if os.path.exists(messages_file):
                with open(messages_file, 'r', encoding='utf-8') as f:
                    self.messages_list = [line.strip() for line in f if line.strip()]

            if not self.messages_list:
                self.messages_list = ["–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"]

            print(f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.messages_list)} —Å–æ–æ–±—â–µ–Ω–∏–π")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            self.messages_list = ["–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"]

    def get_random_message(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not self.messages_list:
            return "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
        return random.choice(self.messages_list)

    async def get_smart_message(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not self.auto_responder or not self.auto_responder.ai_enabled:
            raise Exception("‚ùå AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω - —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–∞–Ω–æ–≤!")

        try:
            ai_message = await self.auto_responder.generate_initial_message()
            return ai_message
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            raise Exception(f"‚ùå AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –û—à–∏–±–∫–∞: {e}")

    def load_processed_users_history(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            if os.path.exists(self.processed_users_file):
                with open(self.processed_users_file, 'r', encoding='utf-8') as f:
                    self.all_time_processed_users = json.load(f)
                print(
                    f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è: {sum(len(users) for users in self.all_time_processed_users.values())} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}")
            self.all_time_processed_users = {}

    def save_processed_users_history(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with open(self.processed_users_file, 'w', encoding='utf-8') as f:
                json.dump(self.all_time_processed_users, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}")

    async def send_messages_to_users(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏"""
        print("\n‚úâÔ∏è –≠–¢–ê–ü 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏")

        await self.clean_numeric_ids()

        moved = await self.user_manager.move_new_to_target()
        if moved > 0:
            print(f"üìã –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ target: {moved} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        users_data = await self.user_manager.load_all_users()
        available_users = users_data.get("available", [])

        filtered_users = [
            user for user in available_users
            if user.startswith('@') or not user.isdigit()
        ]

        if len(filtered_users) < len(available_users):
            removed = len(available_users) - len(filtered_users)
            print(f"üö´ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {removed} —Ü–∏—Ñ—Ä–æ–≤—ã—Ö ID –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏")
            available_users = filtered_users

        if not available_users:
            print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return 0

        print(f"üìä –ì–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ: {len(available_users)} —Å–æ–æ–±—â–µ–Ω–∏–π")

        distribution = await self.user_manager.calculate_distribution(
            len(self.active_sessions),
            self.config.get("messages_per_account", 2),
            self.config.get("max_messages_per_account", 10)
        )

        if not distribution.get("can_send"):
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ—Å—Å–∏–π. –ù—É–∂–Ω–æ: {distribution.get('needed_sessions')}")
            return 0

        print(f"üìä –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {distribution.get('actual_per_account')}")
        print(f"üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º {len(self.active_sessions)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö AI —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å–µ—Å—Å–∏—é)...")

        session_messages = {}
        working_sessions = []

        for i, client in enumerate(self.active_sessions):
            try:
                me = await asyncio.wait_for(client.get_me(), timeout=10)

                try:
                    unique_message = await self.get_smart_message()
                    session_messages[client] = unique_message
                    print(f"ü§ñ –°–µ—Å—Å–∏—è #{i + 1} ({me.first_name}): {unique_message[:50]}...")
                    working_sessions.append(client)
                except Exception as e:
                    if "AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" in str(e) or "AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω" in str(e):
                        print(f"üõë {str(e)}")
                        print("üõ°Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–∞–Ω–æ–≤!")
                        return 0
                    session_messages[client] = self.get_random_message()
                    working_sessions.append(client)

            except Exception as e:
                print(f"‚ùå –°–µ—Å—Å–∏—è {i + 1} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")
                await self.move_broken_session(client, "send_check_failed")

        if not working_sessions:
            print("‚ùå –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return 0

        self.active_sessions = working_sessions

        sent_count = await self.send_messages_with_retry(
            working_sessions,
            available_users,
            session_messages,
            self.config.get("delay_ms", 1000),
            distribution.get("actual_per_account", 1)
        )

        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {sent_count}")

        await self.user_manager.save_users_async(
            self.config["target_users_file"],
            []
        )

        return sent_count

    async def send_messages_with_retry(self, sessions, users, session_messages, delay_ms, messages_per_account):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é"""
        sent_count = 0
        failed_users = []

        for i, user in enumerate(users):
            if not self.is_running:
                break

            session_index = i % len(sessions)
            client = sessions[session_index]
            message = session_messages[client]

            try:
                success = await self.try_send_message(client, user, message)

                if success:
                    sent_count += 1

                    # –ü–æ–ª—É—á–∞–µ–º ID —Å–µ—Å—Å–∏–∏
                    me = await client.get_me()
                    session_id = f"{me.id}_{me.phone}"

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª
                    if session_id not in self.session_processed_users:
                        self.session_processed_users[session_id] = set()
                    self.session_processed_users[session_id].add(user)

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                    if session_id not in self.all_time_processed_users:
                        self.all_time_processed_users[session_id] = []
                    if user not in self.all_time_processed_users[session_id]:
                        self.all_time_processed_users[session_id].append(user)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 50 —Å–æ–æ–±—â–µ–Ω–∏–π
                    if sent_count % 50 == 0:
                        self.save_processed_users_history()
                        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}/{len(users)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                else:
                    failed_users.append(user)

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")
                failed_users.append(user)

            await asyncio.sleep(delay_ms / 1000)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –∫–æ–Ω—Ü–µ
        self.save_processed_users_history()
        if failed_users:
            await self.user_manager.save_users_async("data/failed_users.txt", failed_users)
            print(f"‚ö†Ô∏è {len(failed_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

        return sent_count

    async def initialize_auto_responder(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞"""
        print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞...")

        try:
            self.auto_responder = init_auto_responder(self.config, self.session_manager)

            if self.auto_responder and self.auto_responder.ai_enabled:
                print("‚úÖ AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

                # –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Ä—Ç—É –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫
                if hasattr(self.auto_responder, 'session_phone_map'):
                    self.auto_responder.session_phone_map = self.session_phone_map

                stats = self.auto_responder.get_stats()
                print("\nüìã –õ–æ–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞:")
                for log_entry in stats.get('initialization_log', []):
                    print(f"   {log_entry}")
            else:
                print("‚ùå AI –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞: {e}")
            import traceback
            traceback.print_exc()

    async def try_send_message(self, client, user, message, max_retries=3):
        """–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        for attempt in range(max_retries):
            try:
                try:
                    me = await asyncio.wait_for(client.get_me(), timeout=5)
                    if not me:
                        raise Exception("–°–µ—Å—Å–∏—è –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                except Exception as e:
                    print(f"‚ùå –°–µ—Å—Å–∏—è –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")
                    return False

                await client.send_message(user, message)
                print(f"‚úÖ [{me.first_name}] -> {user}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True

            except FloodWaitError as e:
                wait_time = e.seconds
                print(f"‚è≥ FloodWait: –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–µ—Å—Å–∏–∏")
                await asyncio.sleep(wait_time)
                continue

            except RPCError as e:
                error_str = str(e).lower()

                if "too many requests" in error_str and "sendmessagerequest" in error_str:
                    print(f"‚ö†Ô∏è Too many requests –¥–ª—è —Å–µ—Å—Å–∏–∏, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é —Å–µ—Å—Å–∏—é")

                    alternative_session = await self.find_alternative_session(client)
                    if alternative_session:
                        print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é")
                        try:
                            me_alt = await alternative_session.get_me()
                            await alternative_session.send_message(user, message)
                            print(f"‚úÖ [{me_alt.first_name}] -> {user}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é")

                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
                            session_id_alt = f"{me_alt.id}_{me_alt.phone}"
                            if session_id_alt not in self.session_processed_users:
                                self.session_processed_users[session_id_alt] = set()
                            self.session_processed_users[session_id_alt].add(user)

                            if hasattr(alternative_session, 'processed_users'):
                                alternative_session.processed_users.add(user)
                            else:
                                alternative_session.processed_users = {user}

                            return True
                        except Exception as alt_e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏: {alt_e}")
                            continue
                    else:
                        print(f"‚ùå –ù–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
                        return False

                elif self.is_known_error(e):
                    print(f"‚ö†Ô∏è –ò–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ RPC: {e}")
                    if attempt == max_retries - 1:
                        return False
                    await asyncio.sleep(5)
                    continue
                else:
                    print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ RPC: {e}")
                    if attempt == max_retries - 1:
                        return False
                    await asyncio.sleep(3)
                    continue

            except Exception as e:
                print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                if attempt == max_retries - 1:
                    return False
                await asyncio.sleep(2)
                continue

        return False

    async def find_alternative_session(self, excluded_session):
        """–ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏"""
        for session in self.active_sessions:
            if session != excluded_session:
                try:
                    me = await asyncio.wait_for(session.get_me(), timeout=5)
                    if me:
                        return session
                except:
                    continue
        return None

    async def check_messages_from_processed(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüëÄ –≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç processed_users")

        users_data = await self.user_manager.load_all_users()
        processed_users = users_data.get("processed", [])

        if not processed_users:
            print("‚ö†Ô∏è –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return

        print(f"üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {len(processed_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏
        for client in self.active_sessions:
            try:
                me = await client.get_me()
                session_id = f"{me.id}_{me.phone}"

                if session_id in self.session_processed_users:
                    tracked = len(self.session_processed_users[session_id])
                    if tracked > 0:
                        print(f"‚úÖ {me.first_name}: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç {tracked} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–µ–∫—É—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏")

                # –¢–∞–∫–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º –∫–ª–∏–µ–Ω—Ç–∞
                if hasattr(client, 'processed_users') and len(client.processed_users) > 0:
                    print(f"   üìå –í –∞—Ç—Ä–∏–±—É—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞: {len(client.processed_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

    async def setup_message_listeners(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Å–ª—É—à–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print("\nüéß –≠–¢–ê–ü 4: –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")

        sessions_to_remove = []

        for client in self.active_sessions[:]:
            try:
                try:
                    me = await asyncio.wait_for(client.get_me(), timeout=5)
                except (asyncio.TimeoutError, asyncio.CancelledError):
                    print(f"‚ùå –°–µ—Å—Å–∏—è {i + 1} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (timeout)")
                    sessions_to_remove.append(client)
                    continue

                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                    client._session_id = f"{me.id}_{me.phone}"

                except Exception as e:
                    print(f"‚ùå –°–µ—Å—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∫–∏: {e}")
                    sessions_to_remove.append(client)
                    continue

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                if hasattr(client, '_message_handlers'):
                    for handler in client._message_handlers:
                        try:
                            client.remove_event_handler(handler)
                        except:
                            pass
                    client._message_handlers = []

                @client.on(events.NewMessage(incoming=True))
                async def handler(event, current_client=client):
                    try:
                        await self.handle_incoming_message(current_client, event)
                    except (TypeNotFoundError, RPCError, MsgidDecreaseRetryError) as e:
                        if isinstance(e, MsgidDecreaseRetryError):
                            print(f"‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã Telegram –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ")
                            return
                        if self.is_known_error(e):
                            print(f"‚ö†Ô∏è –ò–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ, —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é: {e}")
                            await self.move_broken_session(current_client, "handler_error")
                            if current_client in self.active_sessions:
                                self.active_sessions.remove(current_client)
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                    except Exception as e:
                        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")

                if not hasattr(client, '_message_handlers'):
                    client._message_handlers = []
                client._message_handlers.append(handler)

                print(f"‚úÖ {me.first_name}: –ø—Ä–æ—Å–ª—É—à–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞")

            except (TypeNotFoundError, RPCError, MsgidDecreaseRetryError) as e:
                if isinstance(e, MsgidDecreaseRetryError):
                    print(f"‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã Telegram, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é")
                elif self.is_known_error(e):
                    print(f"‚ö†Ô∏è –ò–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏, –ø–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                    sessions_to_remove.append(client)
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Å–ª—É—à–∫–∏: {e}")
            except Exception as e:
                print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Å–ª—É—à–∫–∏: {e}")
                sessions_to_remove.append(client)

        for client in sessions_to_remove:
            await self.move_broken_session(client, "listener_setup_failed")
            if client in self.active_sessions:
                self.active_sessions.remove(client)

    async def handle_incoming_message(self, client, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
            if self.auto_responder:
                try:
                    me_info = await client.get_me()
                    account_phone = me_info.phone if me_info else None
                except Exception:
                    account_phone = None
                await self.process_auto_response(client, sender, text, account_phone)

            sender = await event.get_sender()
            if not sender:
                return

            # –ü–æ–ª—É—á–∞–µ–º ID —Å–µ—Å—Å–∏–∏
            session_id = getattr(client, '_session_id', None)
            if not session_id:
                session_id = f"{me.id}_{me.phone}"
                client._session_id = session_id

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            sender_identifiers = []
            if sender.username:
                sender_identifiers.append(f"@{sender.username}")
                sender_identifiers.append(sender.username)
            sender_identifiers.append(str(sender.id))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
            is_processed_user = False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω
            if session_id in self.all_time_processed_users:
                all_time_users = self.all_time_processed_users[session_id]
                for identifier in sender_identifiers:
                    if identifier in all_time_users:
                        is_processed_user = True
                        break

            # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ
            if not is_processed_user and session_id in self.session_processed_users:
                current_users = self.session_processed_users[session_id]
                for identifier in sender_identifiers:
                    if identifier in current_users:
                        is_processed_user = True
                        break

            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            if not is_processed_user:
                return

            text = event.raw_text
            timestamp = datetime.now().strftime("%H:%M:%S")

            print(f"\n[{timestamp}] üì© {sender.first_name} -> {me.first_name}: {text[:50]}...")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if notification_bot:
                account_info = {'phone': me.phone or 'Unknown', 'name': me.first_name or 'Unknown'}
                sender_info = {'name': sender.first_name or 'Unknown', 'username': sender.username or 'unknown'}
                asyncio.create_task(notification_bot.send_notification(account_info, sender_info, text))

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
            if self.auto_responder:
                await self.process_auto_response(client, sender, text)
                try:
                    me_info = await client.get_me()
                    account_phone = me_info.phone if me_info else None
                except:
                    account_phone = None
                await self.process_auto_response(client, sender, text, account_phone)
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                dialogs = await client.get_dialogs()
                for dialog in dialogs:
                    if dialog.entity.id == sender.id:
                        async for message in client.iter_messages(dialog.entity, limit=None):
                            try:
                                await message.delete(revoke=False)
                            except Exception as del_e:
                                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {del_e}")
                        print(f"   üóëÔ∏è –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ —Å {sender.first_name} —É–¥–∞–ª–µ–Ω—ã")
                        break
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

        except (TypeNotFoundError, RPCError, MsgidDecreaseRetryError) as e:
            if isinstance(e, MsgidDecreaseRetryError):
                print(f"‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã Telegram")
                return
            if self.is_known_error(e):
                print(f"‚ö†Ô∏è –ò–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é: {e}")
                await self.move_broken_session(client, "known_error_in_handler")
                if client in self.active_sessions:
                    self.active_sessions.remove(client)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def process_auto_response(self, client, sender, message_text, account_phone=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞"""
        try:
            if not self.auto_responder:
                return

            user_id = sender.username if sender.username else str(sender.id)
            if sender.username:
                user_id = f"@{sender.username}"

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
            if account_phone is None:
                try:
                    me_info = await client.get_me()
                    account_phone = me_info.phone if me_info else None
                except:
                    account_phone = None

            response = await self.auto_responder.handle_message(
                user_id=user_id,
                message=message_text,
                phone=sender.phone if hasattr(sender, 'phone') else None,
                username=sender.username,
                first_name=sender.first_name,
            )

            if response:
                await asyncio.sleep(random.uniform(3, 8))

                try:
                    await client(SetTypingRequest(sender, SendMessageTypingAction()))
                    await asyncio.sleep(random.uniform(2, 4))
                except:
                    pass

                await client.send_message(sender, response)

                me = await client.get_me()
                print(
                    f"[{datetime.now().strftime('%H:%M:%S')}] ü§ñ {me.first_name} -> {sender.first_name}: {response[:50]}...")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞: {e}")

    async def main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ë–ï–ó –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
        print("\nüîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        self.is_running = True

        while self.is_running:
            try:
                print(f"\n{'=' * 60}")
                print(f"‚è∞ –ù–ê–ß–ê–õ–û –¶–ò–ö–õ–ê - {datetime.now().strftime('%H:%M:%S')}")
                print(f"{'=' * 60}")

                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª, –ù–ï –∏—Å—Ç–æ—Ä–∏—é
                self.session_processed_users.clear()

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—Ä–∏–∏
                total_in_history = sum(len(users) for users in self.all_time_processed_users.values())

                await self.check_sessions_health()

                if not self.active_sessions:
                    print("‚ùå –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª")
                    await asyncio.sleep(300)
                    continue

                converted = await self.convert_phone_numbers()
                sent = await self.send_messages_to_users()
                await self.check_messages_from_processed()
                await self.setup_message_listeners()

                print(f"\nüìä –ò–¢–û–ì–ò –¶–ò–ö–õ–ê:")
                print(f"   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {converted} –Ω–æ–º–µ—Ä–æ–≤")
                print(f"   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent} —Å–æ–æ–±—â–µ–Ω–∏–π")
                print(f"   ‚Ä¢ –†–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π: {len(self.active_sessions)}")
                print(f"   ‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {sent}")
                print(f"   ‚Ä¢ –í—Å–µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {total_in_history + sent}")

                print(f"\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {self.check_interval // 60} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
                await asyncio.sleep(self.check_interval)

            except KeyboardInterrupt:
                print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                import traceback
                traceback.print_exc()
                await asyncio.sleep(60)

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        success = await self.initialize()
        if not success:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
            return

        print("\n" + "=" * 60)
        print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô MASS SENDER –ó–ê–ü–£–©–ï–ù")
        print(f"‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {self.check_interval // 60} –º–∏–Ω—É—Ç")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("=" * 60)

        try:
            await self.main_loop()
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self.shutdown()

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        print("\nüì¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.is_running = False

        for client in self.active_sessions:
            try:
                if hasattr(client, '_message_handlers'):
                    for handler in client._message_handlers:
                        try:
                            client.remove_event_handler(handler)
                        except:
                            pass

                await client.disconnect()
            except:
                pass

        if notification_bot:
            try:
                await notification_bot.send_shutdown_notification()
            except:
                pass
            try:
                await notification_bot.close_session()
            except:
                pass

        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "=" * 60)
    print("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô MASS SENDER")
    print("=" * 60)

    sender = AutoMassSender()

    while True:
        print("\n1. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º")
        print("2. üß™ –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
        print("3. üßπ –û—á–∏—Å—Ç–∏—Ç—å broken_sessions")
        print("4. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∏—Ç—ã—Ö —Å–µ—Å—Å–∏–π")
        print("5. ‚ùå –í—ã—Ö–æ–¥")
        print("-" * 40)

        choice = input("–í—ã–±–æ—Ä: ").strip()

        if choice == "1":
            await sender.run()
            break
        elif choice == "2":
            success = await sender.initialize()
            if success:
                print("\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")
                await sender.convert_phone_numbers()
                await sender.send_messages_to_users()
                await sender.check_messages_from_processed()
                await sender.setup_message_listeners()
                print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
                await sender.shutdown()
        elif choice == "3":
            broken_dir = "broken_sessions"
            if os.path.exists(broken_dir):
                try:
                    files = os.listdir(broken_dir)
                    print(f"üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(files)} –±–∏—Ç—ã—Ö —Å–µ—Å—Å–∏–π")
                    shutil.rmtree(broken_dir)
                    os.makedirs(broken_dir, exist_ok=True)
                    print("‚úÖ –ü–∞–ø–∫–∞ broken_sessions –æ—á–∏—â–µ–Ω–∞")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            else:
                print("‚ö†Ô∏è –ü–∞–ø–∫–∞ broken_sessions –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        elif choice == "4":
            broken_dir = "broken_sessions"
            if os.path.exists(broken_dir):
                files = os.listdir(broken_dir)
                if files:
                    print("\nüìä –ë–ò–¢–´–ï –°–ï–°–°–ò–ò:")
                    for file in files:
                        parts = file.split('_')
                        if len(parts) >= 2:
                            reason = parts[-2] if len(parts) > 2 else "unknown"
                            print(f"   ‚Ä¢ {parts[0]}: {reason}")
                    print(f"\n   –í—Å–µ–≥–æ: {len(files)} —Ñ–∞–π–ª–æ–≤")
                else:
                    print("‚úÖ –ù–µ—Ç –±–∏—Ç—ã—Ö —Å–µ—Å—Å–∏–π")
            else:
                print("‚úÖ –ü–∞–ø–∫–∞ broken_sessions –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        elif choice == "5":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

    async def cleanup_all_dialogs(self):
        """–£–¥–∞–ª—è–µ—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —É –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
        print("\nüóëÔ∏è –û–ß–ò–°–¢–ö–ê –í–°–ï–• –î–ò–ê–õ–û–ì–û–í...")

        for client in self.active_sessions:
            try:
                me = await client.get_me()
                print(f"\nüì± –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ {me.first_name}...")

                dialogs = await client.get_dialogs()
                for dialog in dialogs:
                    if dialog.is_user:  # –¢–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã
                        try:
                            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ
                            deleted_count = 0
                            async for message in client.iter_messages(dialog.entity, limit=None):
                                try:
                                    await message.delete()
                                    deleted_count += 1
                                except:
                                    pass

                            if deleted_count > 0:
                                print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –¥–∏–∞–ª–æ–≥–∞ —Å {dialog.name}")
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞ —Å {dialog.name}: {e}")

                print(f"‚úÖ –°–µ—Å—Å–∏—è {me.first_name} –æ—á–∏—â–µ–Ω–∞")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")

        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
