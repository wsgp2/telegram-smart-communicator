#!/usr/bin/env python3
"""
MASS SENDER –° –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï–ú –ß–ê–¢–ê–ú–ò
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã —Å –º–µ–Ω—é –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
"""
import asyncio
import os
import sys

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from session_manager import SessionManager
from user_manager import UserManager
from message_handler import MessageHandler
from notification_bot import init_notification_bot, notification_bot
from config import load_config, save_config

class MassSender:
    def __init__(self):
        self.config = load_config()
        self.session_manager = SessionManager()
        self.user_manager = UserManager()
        self.message_handler = MessageHandler()
        self.active_sessions = []
        self.background_listener = None
        self.shutdown_called = False
        self.auto_responder = None

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mass Sender...")
        os.makedirs("sessions", exist_ok=True)
        os.makedirs("proxies", exist_ok=True)
        os.makedirs("data", exist_ok=True)
        os.makedirs("logs", exist_ok=True)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        init_notification_bot()


        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    async def show_menu(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã"""
        menu_options = [
            "üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
            "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã",
            "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏–∏",
            "üì± –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤",
            "‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            "üì• –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä—É—á–Ω—É—é",
            "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã",
            "üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏",
            "üßπ –û—á–∏—Å—Ç–∫–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–π",
            "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π",
            "‚ùå –í—ã—Ö–æ–¥"
        ]

        while True:
            print("\n" + "=" * 60)
            print("ü§ñ MASS SENDER")
            print("=" * 60)
            for i, option in enumerate(menu_options, 1):
                print(f"{i}. {option}")
            print("=" * 60)

            try:
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ").strip()
                await self.handle_menu_choice(choice)
            except KeyboardInterrupt:
                print("\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                await self.shutdown()
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def handle_menu_choice(self, choice):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ–Ω—é"""
        mapping = {
            "1": self.start_sending_campaign,
            "2": self.show_system_status,
            "3": self.reload_sessions,
            "4": self.convert_phone_numbers,
            "5": self.edit_settings,
            "6": self.add_users_manually,
            "7": self.check_new_resources,
            "8": self.chat_management,
            "9": self.cleanup_sessions,
            "10": self.show_detailed_session_stats,
            "0": self.shutdown
        }

        action = mapping.get(choice)
        if not action:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return

        if asyncio.iscoroutinefunction(action):
            await action()
        else:
            action()

    async def start_sending_campaign(self):
        """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        print("\nüéØ –ó–ê–ü–£–°–ö –†–ê–°–°–´–õ–ö–ò\n" + "=" * 50)
        sessions = await self.session_manager.load_sessions()
        if not sessions:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π!")
            return
        users_data = await self.user_manager.load_all_users()
        available_users = users_data.get("available", [])
        if not available_users:
            print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!")
            return

        distribution = await self.user_manager.calculate_distribution(
            len(sessions),
            self.config.get("messages_per_account", 2),
            self.config.get("max_messages_per_account", 10)
        )
        confirm = input(f"\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å {distribution['available_users']} —Å–æ–æ–±—â–µ–Ω–∏–π? (y/n): ").lower()
        if confirm != 'y':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            return

        sent_count = await self.message_handler.send_messages(
            sessions,
            available_users,
            self.config.get("message", "–ü—Ä–∏–≤–µ—Ç!"),
            self.config.get("delay_ms", 1000),
            distribution.get("actual_per_account", 1)
        )
        print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("üí¨ –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ Telegram-–±–æ—Ç–∞")

    async def show_system_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´\n" + "=" * 50)
        sessions = await self.session_manager.load_sessions()
        users_data = await self.user_manager.load_all_users()

        stats = await self.session_manager.get_session_stats()
        print(f"üîß –°–µ—Å—Å–∏–∏: {stats['total']} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']})")

        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        for key in ['target', 'processed', 'new', 'phones', 'available']:
            print(f"   ‚Ä¢ {key.capitalize()}: {len(users_data.get(key, []))}")

        distribution = await self.user_manager.calculate_distribution(len(sessions),
                                                                      self.config.get("messages_per_account", 2))
        self._print_distribution_info(distribution)

        bot_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if notification_bot else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        print(f"ü§ñ –ë–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {bot_status}")

    # ---------------------------
    # –°—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏
    # ---------------------------
    async def reload_sessions(self):
        print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π...")
        await self.session_manager.load_sessions()
        print("‚úÖ –°–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã")

    async def convert_phone_numbers(self):
        print("üì± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤...")
        count = await self.user_manager.convert_phones_to_usernames()
        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {count} –Ω–æ–º–µ—Ä–æ–≤")

    async def edit_settings(self):
        print("‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("‚ö†Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

    async def add_users_manually(self):
        print("üì• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä—É—á–Ω—É—é")
        users = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ").split(",")
        users = [u.strip() for u in users if u.strip()]
        if users:
            await self.user_manager.add_new_users(users)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        else:
            print("‚ùå –ù–µ—á–µ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç—å")

    async def check_new_resources(self):
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤")
        has_new = await self.user_manager.check_for_new_users()
        print(f"‚úÖ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {'–î–∞' if has_new else '–ù–µ—Ç'}")

    async def chat_management(self):
        print("üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏")
        print("‚ö†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

    async def cleanup_sessions(self):
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π")
        removed = 0
        for user_id, ctx in list(self.auto_responder.conversations.items()):
            if ctx.status == "completed":
                del self.auto_responder.conversations[user_id]
                removed += 1
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤")

    async def show_detailed_session_stats(self):
        print("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π")
        sessions = await self.session_manager.load_sessions()
        for idx, session in enumerate(sessions, 1):
            print(f"   ‚Ä¢ –°–µ—Å—Å–∏—è {idx}: {session}")

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        if self.shutdown_called:
            return
        self.shutdown_called = True
        print("\nüì¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Mass Sender...")

        sessions = self.session_manager.sessions + self.active_sessions
        for client in sessions:
            try:
                await client.disconnect()
            except:
                pass

        if notification_bot:
            await notification_bot.send_shutdown_notification()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def _print_distribution_info(self, distribution):
        """–í—ã–≤–æ–¥ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print(f"\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï:")
        print(f"   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {distribution.get('available_users',0)}")
        print(f"   ‚Ä¢ –¢–µ–∫—É—â–∏–µ —Å–µ—Å—Å–∏–∏: {distribution.get('current_sessions',0)}")
        print(f"   ‚Ä¢ –ú–∞–∫—Å. –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {distribution.get('max_per_account',0)}")
        can_send = "‚úÖ –î–ê" if distribution.get("can_send") else "‚ùå –ù–ï–¢"
        print(f"   ‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {can_send}")
        if distribution.get("can_send"):
            print(f"   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {distribution.get('actual_per_account',0)}")
        else:
            print(f"   ‚Ä¢ –ù—É–∂–Ω–æ —Å–µ—Å—Å–∏–π: {distribution.get('needed_sessions',0)}")


async def main():
    print("ü§ñ –ó–ê–ì–†–£–ó–ö–ê MASS SENDER...")
    sender = MassSender()
    try:
        await sender.initialize()
        await sender.show_menu()
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if notification_bot:
            await notification_bot.send_security_notification(
                {"phone": "System", "name": "MassSender"},
                {"name": "Error", "username": "system"},
                f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}",
                "üö® –°–ò–°–¢–ï–ú–ù–ê–Ø –û–®–ò–ë–ö–ê"
            )
    finally:
        await sender.shutdown()


if __name__ == "__main__":
    asyncio.run(main())
