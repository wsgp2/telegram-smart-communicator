#!/usr/bin/env python3
"""
üìû PhoneConverter - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ username/id
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
- –° –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞
"""

import asyncio
import re
from telethon.tl.functions.contacts import ImportContactsRequest, DeleteContactsRequest, SearchRequest
from telethon.tl.types import InputPhoneContact
from functools import lru_cache

class PhoneConverter:
    def __init__(self, client, cache_size=1024):
        self.client = client
        self.cache = {}  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ LRU –∫—ç—à –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤

    async def convert_phone_to_username(self, phone):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ username –∏–ª–∏ id"""
        formatted_phone = self.format_phone(phone)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if formatted_phone in self.cache:
            return self.cache[formatted_phone]

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        methods = [
            self._method_direct_search(formatted_phone),
            self._method_import_contact(formatted_phone),
            self._method_search_contacts(formatted_phone)
        ]

        for task in asyncio.as_completed(methods):
            try:
                entity = await asyncio.wait_for(task, timeout=5)  # —Ç–∞–π–º–∞—É—Ç –Ω–∞ –º–µ—Ç–æ–¥
                if entity:
                    identifier = self.extract_identifier(entity)
                    self.cache[formatted_phone] = identifier
                    return identifier
            except asyncio.TimeoutError:
                continue
            except Exception:
                continue

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        self.cache[formatted_phone] = None
        return None

    def format_phone(self, phone):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –≤–∏–¥ +7..."""
        digits = re.sub(r'\D', '', str(phone))

        if digits.startswith('7') and len(digits) == 11:
            return '+' + digits
        elif digits.startswith('8') and len(digits) == 11:
            return '+7' + digits[1:]
        elif len(digits) == 10:
            return '+7' + digits
        else:
            return '+' + digits

    async def _method_direct_search(self, phone):
        """–ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —á–µ—Ä–µ–∑ get_entity"""
        try:
            return await self.client.get_entity(phone)
        except:
            return None

    async def _method_import_contact(self, phone):
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            contact = InputPhoneContact(client_id=0, phone=phone, first_name="FindUser", last_name="Temp")
            result = await self.client(ImportContactsRequest([contact]))
            if result.users:
                user = result.users[0]
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
                try:
                    await self.client(DeleteContactsRequest([user]))
                except:
                    pass
                return user
        except:
            return None

    async def _method_search_contacts(self, phone):
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ SearchRequest"""
        try:
            result = await self.client(SearchRequest(q=phone, limit=5))
            for user in result.users:
                if hasattr(user, 'phone') and user.phone == phone.replace('+', ''):
                    return user
        except:
            return None

    def extract_identifier(self, entity):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç username (@username) –∏–ª–∏ id"""
        if hasattr(entity, 'username') and entity.username:
            return f"@{entity.username}"
        elif hasattr(entity, 'id'):
            return str(entity.id)
        return None
