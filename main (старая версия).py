import os
import json
import asyncio
import random
from telethon import TelegramClient
from telethon.tl.functions.contacts import GetContactsRequest
from telethon.errors import FloodWaitError, PeerFloodError
import telethon


CONFIG_FILE = "config.json"
SESSION_FOLDER = "sessions"
USERS_FILE = "target_users.txt"
PROXY_FOLDER = "proxies"


# ---------- –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ ----------

def load_config():
    if not os.path.exists(CONFIG_FILE):
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_config = {
            "api_id": "",
            "api_hash": "",
            "accounts_per_proxy": 1,
            "proxy_mode": "auto",
            "target_users_file": USERS_FILE,
            "message": "–ü—Ä–∏–≤–µ—Ç!",
            "delay_ms": 1000,
            "messages_per_account": 1,
            "proxy_type": "socks5"  # –ù–æ–≤–æ–µ –ø–æ–ª–µ: —Ç–∏–ø –ø—Ä–æ–∫—Å–∏
        }
        with open(CONFIG_FILE, "w", encoding="utf-8") as f:
            json.dump(default_config, f, indent=4, ensure_ascii=False)
        return default_config

    with open(CONFIG_FILE, "r", encoding="utf-8") as f:
        cfg = json.load(f)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
    defaults = {
        "accounts_per_proxy": 1,
        "proxy_mode": "auto",
        "target_users_file": USERS_FILE,
        "message": "–ü—Ä–∏–≤–µ—Ç!",
        "delay_ms": 1000,
        "messages_per_account": 1,
        "proxy_type": "socks5"
    }

    for key, value in defaults.items():
        if key not in cfg:
            cfg[key] = value

    return cfg


def save_config(cfg):
    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump(cfg, f, indent=4, ensure_ascii=False)


# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ----------
def load_users(users_file):
    if not os.path.exists(users_file):
        print(f"[!] –§–∞–π–ª {users_file} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π.")
        open(users_file, "w", encoding="utf-8").close()
        return []
    with open(users_file, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]


# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ ----------
def load_proxies():
    if not os.path.exists(PROXY_FOLDER):
        os.makedirs(PROXY_FOLDER)
        print(f"[!] –ü–∞–ø–∫–∞ {PROXY_FOLDER} —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return []

    proxies = []
    for fname in os.listdir(PROXY_FOLDER):
        path = os.path.join(PROXY_FOLDER, fname)
        if not os.path.isfile(path):
            continue
        with open(path, "r", encoding="utf-8", errors="ignore") as f:
            for line in f:
                s = line.strip()
                if not s:
                    continue

                # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—Ä–æ–∫—Å–∏
                if "://" in s:
                    # –§–æ—Ä–º–∞—Ç: —Ç–∏–ø://user:pass@host:port
                    proxy_parts = s.split("://")
                    proxy_type = proxy_parts[0].lower()
                    auth_host = proxy_parts[1]

                    if "@" in auth_host:
                        auth, host_port = auth_host.split("@")
                        user, pwd = auth.split(":") if ":" in auth else (auth, "")
                    else:
                        host_port = auth_host
                        user, pwd = None, None

                    host, port = host_port.split(":")
                    port = int(port)

                    proxies.append((proxy_type, host, port, user, pwd))
                else:
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: host:port:user:pwd
                    parts = s.split(":")
                    try:
                        if len(parts) >= 2:
                            host = parts[0]
                            port = int(parts[1])
                            user = parts[2] if len(parts) > 2 else None
                            pwd = parts[3] if len(parts) > 3 else None
                            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º socks5 –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                            proxies.append(("socks5", host, port, user, pwd))
                    except Exception as e:
                        print(f"[!] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: {s} - {e}")
    return proxies


# ---------- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏-–∫–æ—Ä—Ç–µ–∂–∞ –¥–ª—è Telethon ----------
def create_proxy_tuple(proxy_info, proxy_type):
    proxy_type, host, port, user, pwd = proxy_info

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π Telethon
    telethon_proxy_type = {
        "socks5": "socks5",
        "socks4": "socks4",
        "http": "http",
        "https": "http",  # Telethon –∏—Å–ø–æ–ª—å–∑—É–µ—Ç "http" –¥–ª—è HTTPS –ø—Ä–æ–∫—Å–∏
        "mtproto": "mtproto"
    }.get(proxy_type.lower(), "socks5")

    if user and pwd:
        return (telethon_proxy_type, host, port, True, user, pwd)
    else:
        return (telethon_proxy_type, host, port, True)


# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π —Å –ø—Ä–æ–∫—Å–∏ ----------
async def load_sessions(api_id, api_hash, proxies, accounts_per_proxy, proxy_type):
    if not os.path.exists(SESSION_FOLDER):
        os.makedirs(SESSION_FOLDER)
        print(f"[!] –ü–∞–ø–∫–∞ {SESSION_FOLDER} —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –ø—É—Å—Ç–∞—è.")
        return []

    files = [f for f in os.listdir(SESSION_FOLDER) if f.endswith(".session")]
    if not files:
        print("[!] –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π –≤ –ø–∞–ø–∫–µ.")
        return []

    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –ø—Ä–æ–∫—Å–∏
    assigned = []
    if proxies:
        if len(proxies) == 1:
            # –ï—Å–ª–∏ –æ–¥–∏–Ω –ø—Ä–æ–∫—Å–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            assigned = [proxies[0]] * len(files)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–∫—Å–∏ - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
            accounts_per_proxy = max(1, len(files) // len(proxies))
            for i, proxy in enumerate(proxies):
                start_idx = i * accounts_per_proxy
                end_idx = min((i + 1) * accounts_per_proxy, len(files))
                for j in range(start_idx, end_idx):
                    if j < len(files):
                        assigned.append(proxy)

            # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∞–∫–∫–∞—É–Ω—Ç—ã –±–µ–∑ –ø—Ä–æ–∫—Å–∏, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ö –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—Ä–æ–∫—Å–∏
            remaining = len(files) - len(assigned)
            if remaining > 0:
                for i in range(remaining):
                    proxy_idx = i % len(proxies)
                    assigned.append(proxies[proxy_idx])
    else:
        assigned = [None] * len(files)

    sessions = []
    for idx, fname in enumerate(files):
        name = os.path.splitext(fname)[0]
        session_path = os.path.join(SESSION_FOLDER, name)
        proxy_info = assigned[idx] if idx < len(assigned) else None

        try:
            if proxy_info:
                proxy_tuple = create_proxy_tuple(proxy_info, proxy_type)
                client = TelegramClient(session_path, int(api_id), api_hash, proxy=proxy_tuple)
            else:
                client = TelegramClient(session_path, int(api_id), api_hash)

            await client.connect()

            if not await client.is_user_authorized():
                print(f"[X] {name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
                await client.disconnect()
                continue

            me = await client.get_me()
            if proxy_info:
                proxy_type, host, port, user, pwd = proxy_info
                print(f"[+] –ó–∞–≥—Ä—É–∂–µ–Ω {me.first_name} ({me.phone}) -> {proxy_type}://{host}:{port}")
            else:
                print(f"[+] –ó–∞–≥—Ä—É–∂–µ–Ω {me.first_name} ({me.phone}) -> –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
            sessions.append(client)

        except Exception as e:
            print(f"\nüî¥ [X] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {fname}:")
            print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            print(f"   –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: {str(e)}")
            if hasattr(e, '__dict__'):
                for attr, value in e.__dict__.items():
                    if attr not in ['args']:
                        print(f"   {attr}: {value}")
            print()

    return sessions


# ---------- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ----------
async def send_messages(sessions, users, message, delay_ms, msgs_per_acc):
    if not users:
        print("[!] –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
        return

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    total_sent = 0
    total_errors = 0
    error_types = {}

    # –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
    random.shuffle(users)

    for client in sessions:
        me = await client.get_me()
        print(f"\n=== –†–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç: {me.first_name} ===")

        try:
            # –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            targets = []
            if users:
                for _ in range(min(msgs_per_acc, len(users))):
                    if users:
                        target = users.pop(random.randrange(len(users)))
                        targets.append(target)

            for target in targets:
                try:
                    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    unique_messages = [
                        "–ü—Ä–∏–≤–µ—Ç, —è –æ—Ç –°–µ—Ä–≥–µ—è, —Ç–µ—Å—Ç–∏—Ä—É—é —Å–≤—è–∑—å üëã",
                        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–µ—Ä–≥–µ–π –ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å",
                        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —ç—Ç–æ —Ç–µ—Å—Ç –æ—Ç –°–µ—Ä–≥–µ—è",
                        "–ü—Ä–∏–≤–µ—Ç! –°–µ—Ä–≥–µ–π –ø–µ—Ä–µ–¥–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–≤—è–∑—å",
                        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ø—Ä–æ–≤–µ—Ä—è—é —Å–≤—è–∑—å –ø–æ –ø–æ—Ä—É—á–µ–Ω–∏—é –°–µ—Ä–≥–µ—è",
                        "–ü—Ä–∏–≤–µ—Ç, —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –°–µ—Ä–≥–µ—è ‚úåÔ∏è",
                        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –°–µ—Ä–≥–µ–π –ø–æ–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤—è–∑—å"
                    ]
                    
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    random_message = random.choice(unique_messages)
                    await client.send_message(target, random_message)
                    print(f"‚úÖ [{me.first_name}] -> {target}: {random_message}")
                    total_sent += 1
                except Exception as e:
                    # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ Telegram
                    print(f"\nüî¥ [{me.first_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {target}:")
                    print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                    print(f"   –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: {str(e)}")
                    
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ª–∏–º–∏—Ç–æ–≤
                    if isinstance(e, FloodWaitError):
                        wait_time = e.seconds
                        hours = wait_time // 3600
                        minutes = (wait_time % 3600) // 60
                        secs = wait_time % 60
                        print(f"   ‚è∞ –¢–û–ß–ù–û–ï –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {hours}—á {minutes}–º {secs}—Å (–≤—Å–µ–≥–æ {wait_time} —Å–µ–∫)")
                        
                    elif isinstance(e, PeerFloodError):
                        print(f"   üö´ PeerFloodError: –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º")
                        print(f"   ‚è∞ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∂–¥–∞—Ç—å: 12-24 —á–∞—Å–∞")
                        print(f"   üí° –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏–ª–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
                    
                        
                    elif "FloodWaitError" in str(type(e)) or "Too many requests" in str(e):
                        if hasattr(e, 'seconds'):
                            wait_time = e.seconds
                            hours = wait_time // 3600
                            minutes = (wait_time % 3600) // 60
                            seconds = wait_time % 60
                            print(f"   ‚è∞ –ù—É–∂–Ω–æ –∂–¥–∞—Ç—å: {hours}—á {minutes}–º {seconds}—Å (–≤—Å–µ–≥–æ {wait_time} —Å–µ–∫)")
                        else:
                            # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏
                            import re
                            time_match = re.search(r'(\d+)', str(e))
                            if time_match:
                                wait_seconds = int(time_match.group(1))
                                hours = wait_seconds // 3600
                                minutes = (wait_seconds % 3600) // 60
                                print(f"   ‚è∞ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {hours}—á {minutes}–º ({wait_seconds} —Å–µ–∫)")
                            else:
                                print(f"   ‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å 1-24 —á–∞—Å–∞")
                    
                    # –£—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫  
                    total_errors += 1
                    error_type = type(e).__name__
                    error_types[error_type] = error_types.get(error_type, 0) + 1
                    
                    # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –æ—à–∏–±–∫–∏
                    if hasattr(e, '__dict__'):
                        for attr, value in e.__dict__.items():
                            if attr not in ['args']:
                                print(f"   {attr}: {value}")
                    print()

                base_delay = delay_ms / 1000.0
                jitter = random.uniform(-0.355, 0.355)
                await asyncio.sleep(max(0.1, base_delay + jitter))

        except Exception as e:
            print(f"\nüî¥ [{me.first_name}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –∞–∫–∫–∞—É–Ω—Ç–∞:")
            print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            print(f"   –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: {str(e)}")
            if hasattr(e, '__dict__'):
                for attr, value in e.__dict__.items():
                    if attr not in ['args']:
                        print(f"   {attr}: {value}")
            print()
        finally:
            await client.disconnect()
            print(f"[{me.first_name}] –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n" + "="*50)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–°–°–´–õ–ö–ò")
    print("="*50)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {total_errors}")
    if error_types:
        print("\nüîç –¢–∏–ø—ã –æ—à–∏–±–æ–∫:")
        for error_type, count in error_types.items():
            print(f"   {error_type}: {count}")
    print("="*50)


# ---------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ----------
def edit_settings(cfg):
    print("\n=== –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ===")

    # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–∫—Å–∏
    proxy_types = ["socks5", "socks4", "http", "https", "mtproto"]

    for key in cfg:
        if key == "proxy_type":
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–∫—Å–∏: {', '.join(proxy_types)}")
            new = input(f"{key} [{cfg[key]}]: ").strip()
            if new and new.lower() in proxy_types:
                cfg[key] = new.lower()
            elif new:
                print(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–∫—Å–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {cfg[key]}")
        else:
            old = cfg[key]
            new = input(f"{key} [{old}]: ").strip()
            if new:
                if key in ["delay_ms", "messages_per_account", "accounts_per_proxy", "api_id"]:
                    try:
                        cfg[key] = int(new)
                    except ValueError:
                        print(f"–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {key}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {old}")
                else:
                    cfg[key] = new

    save_config(cfg)
    print("[+] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n")


# ---------- –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∫—Å–∏ ----------
def show_proxy_info(proxies):
    if not proxies:
        print("[!] –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    print("\n=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∫—Å–∏ ===")
    for i, proxy in enumerate(proxies, 1):
        proxy_type, host, port, user, pwd = proxy
        auth_info = f" (auth: {user}:{pwd})" if user and pwd else " (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)"
        print(f"{i}. {proxy_type}://{host}:{port}{auth_info}")


# ---------- MAIN ----------
async def main():
    cfg = load_config()

    while True:
        print("\n=== Telegram Mass Sender (Console) ===")
        print("1 - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("2 - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∫—Å–∏")
        print("3 - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
        print("0 - –í—ã—Ö–æ–¥")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

        if choice == "1":
            edit_settings(cfg)

        elif choice == "2":
            proxies = load_proxies()
            show_proxy_info(proxies)

        elif choice == "3":
            users = load_users(cfg["target_users_file"])
            if users:
                print(f"[+] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {cfg['target_users_file']}")
            else:
                print("[!] –§–∞–π–ª –ø—É—Å—Ç, –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

            proxies = load_proxies()
            if proxies:
                print(f"[+] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(proxies)} –ø—Ä–æ–∫—Å–∏")
                show_proxy_info(proxies)
            else:
                print("[!] –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∞–∫–∫–∞—É–Ω—Ç—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é")

            sessions = await load_sessions(
                cfg["api_id"],
                cfg["api_hash"],
                proxies,
                cfg["accounts_per_proxy"],
                cfg["proxy_type"]
            )

            if not sessions:
                print("[!] –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
                continue

            print(f"[+] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {len(sessions)} —Å–µ—Å—Å–∏–π")

            await send_messages(
                sessions,
                users,
                cfg["message"],
                cfg["delay_ms"],
                cfg["messages_per_account"]
            )

        elif choice == "0":
            print("–í—ã—Ö–æ–¥.")
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")


if __name__ == "__main__":
    asyncio.run(main())
