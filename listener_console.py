#!/usr/bin/env python3
"""
üì° ListenerConsole - –ø—Ä–æ—Å–ª—É—à–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–º
"""

import asyncio
import os
import sys
from datetime import datetime

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from telethon import events
from config import load_config
from notification_bot import init_notification_bot, notification_bot
from auto_responder import init_auto_responder, get_auto_responder


class ListenerConsole:
    def __init__(self):
        self.sessions = []
        self.is_listening = False
        self.session_manager = None  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π

    async def setup_listeners(self, sessions, session_manager=None):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
        self.sessions = sessions
        self.session_manager = session_manager
        self.is_listening = True
        print("üéß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Å–ª—É—à–∫–∏...")
        print("=" * 60)

        async def setup_client(client):
            try:
                me = await client.get_me()
                client.sent_users = set()

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                from user_manager import UserManager
                user_manager = UserManager()
                users_data = await user_manager.load_all_users()
                processed_users = users_data.get("processed", [])

                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫—ç—à
                for user in processed_users:
                    try:
                        entity = await client.get_entity(user)
                        client.sent_users.add(entity.id)
                    except:
                        continue

                # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                self._create_message_handler(client)
                print(f"‚úÖ {me.first_name}: –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–ª—É—à–∫–µ")
                return len(processed_users)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                return 0

        counts = await asyncio.gather(*[setup_client(c) for c in sessions])
        total_users = sum(counts)

        print(f"\nüéØ –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–µ–º {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("üí¨ –í—Å–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –∑–¥–µ—Å—å –∏ –≤ Telegram-–±–æ—Ç–µ")
        print("=" * 60)

    def _create_message_handler(self, client):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤—ã–≤–æ–¥–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –±–æ—Ç–æ–º"""
        auto_responder = get_auto_responder()

        @client.on(events.NewMessage(incoming=True))
        async def handler(event):
            try:
                sender = await event.get_sender()
                if not sender:
                    return

                if sender.id not in client.sent_users:
                    return

                text = event.raw_text
                me = await client.get_me()
                timestamp = datetime.now().strftime("%H:%M:%S")

                # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
                print(f"\n[{timestamp}] üì© {sender.first_name} -> {me.first_name}: {text}")
                print("‚îÄ" * 60)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–æ—Ç
                if notification_bot:
                    account_info = {'phone': me.phone or 'Unknown', 'name': me.first_name or 'Unknown'}
                    sender_info = {'name': sender.first_name or 'Unknown', 'username': sender.username or 'No username'}
                    asyncio.create_task(notification_bot.send_notification(account_info, sender_info, text))

                # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                if auto_responder:
                    asyncio.create_task(self._handle_auto_response(client, sender, text))

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É —Å–µ–±—è
                try:
                    await event.message.delete(revoke=False)
                except:
                    pass

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def _handle_auto_response(self, client, sender, text):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ AutoResponder"""
        auto_responder = get_auto_responder()
        if not auto_responder:
            return

        try:
            response = await auto_responder.handle_message(str(sender.id), text)
            if response:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
                await client.send_message(sender.id, response)
                print(f"ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {sender.first_name}: {response}")

                # –¢–∞–∫–∂–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –≤ –±–æ—Ç–∞
                if notification_bot:
                    me = await client.get_me()
                    account_info = {'phone': me.phone or 'Unknown', 'name': me.first_name or 'Unknown'}
                    sender_info = {'name': sender.first_name or 'Unknown', 'username': sender.username or 'No username'}
                    asyncio.create_task(notification_bot.send_notification(
                        account_info, sender_info, f"ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç: {response}", is_auto_response=True
                    ))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞: {e}")

    async def start_listening(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
        if not self.sessions:
            print("‚ùå –ù–µ—Ç —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è!")
            return

        print("\nüöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∫–∏... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("=" * 60)

        try:
            await asyncio.gather(*[client.run_until_disconnected() for client in self.sessions])
        except KeyboardInterrupt:
            print("\nüõë –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")


async def main():
    print("üì° –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ –ø—Ä–æ—Å–ª—É—à–∫–∏")
    print("=" * 60)
    init_notification_bot()
    config = load_config()
    from session_manager import SessionManager
    session_manager = SessionManager()
    sessions = await session_manager.load_sessions()
    if not sessions:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π!")
        return

    init_auto_responder(config, session_manager)

    ar = get_auto_responder()
    if ar :
        print(f"ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω ")
    else:
        print("ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤—ã–∫–ª—é—á–µ–Ω")

    listener = ListenerConsole()
    await listener.setup_listeners(sessions, session_manager)
    await listener.start_listening()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏ –ø—Ä–æ—Å–ª—É—à–∫–∏")
