#!/usr/bin/env python3
import asyncio
from telethon import TelegramClient
from telethon.tl.functions.account import UpdateNotifySettingsRequest
from telethon.tl.functions.folders import EditPeerFoldersRequest
from telethon.tl.functions.messages import SetHistoryTTLRequest
from telethon.tl.types import InputNotifyPeer, InputPeerNotifySettings, InputFolderPeer
from collections import defaultdict
from typing import Callable

class ChatManager:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —á–∞—Ç–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ—á–µ—Ä–µ–¥—å—é —Å–æ–æ–±—â–µ–Ω–∏–π"""

    def __init__(self, client: TelegramClient, auto_responder: Callable = None, auto_delete_delay: int = 4):
        self.client = client
        self.auto_responder = auto_responder  # callback –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
        self.auto_delete_delay = auto_delete_delay
        self.processed_chats = set()  # –∫—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
        self.entity_cache = {}  # –∫—ç—à InputEntity –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.message_queue = asyncio.Queue()
        self.lock = asyncio.Lock()
        self.running = False

    # -----------------------
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    # -----------------------
    async def run(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        if self.running:
            return
        self.running = True
        while True:
            msg_data = await self.message_queue.get()
            target = msg_data.get("target")
            text = msg_data.get("text")
            await self.send_hide_and_mute(target, text)
            self.message_queue.task_done()

    # -----------------------
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
    # -----------------------
    async def queue_message(self, target, text: str):
        """–î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        await self.message_queue.put({"target": target, "text": text})

    # -----------------------
    # –ü–æ–ª—É—á–µ–Ω–∏–µ InputEntity —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    # -----------------------
    async def get_peer(self, username_or_id):
        if username_or_id in self.entity_cache:
            return self.entity_cache[username_or_id]

        if hasattr(username_or_id, 'id'):
            entity = await self.client.get_input_entity(username_or_id)
            self.entity_cache[username_or_id] = entity
            return entity

        if isinstance(username_or_id, str) and username_or_id.startswith('@'):
            username_or_id = username_or_id[1:]

        entity = await self.client.get_input_entity(username_or_id)
        self.entity_cache[username_or_id] = entity
        return entity

    # -----------------------
    # –ú—å—é—Ç —á–∞—Ç–∞
    # -----------------------
    async def mute_chat(self, peer, duration=2147483647):
        try:
            await self.client(UpdateNotifySettingsRequest(
                peer=InputNotifyPeer(peer),
                settings=InputPeerNotifySettings(mute_until=duration, sound=None, show_previews=False)
            ))
            return True
        except:
            return False

    # -----------------------
    # –ê—Ä—Ö–∏–≤ —á–∞—Ç–∞
    # -----------------------
    async def archive_chat(self, peer, folder_id=1):
        try:
            await self.client(EditPeerFoldersRequest(folder_peers=[InputFolderPeer(peer=peer, folder_id=folder_id)]))
            return True
        except:
            return False

    # -----------------------
    # –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –æ—Ç–ø—Ä–∞–≤–∫–∞ + –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç + –º—å—é—Ç + –∞—Ä—Ö–∏–≤
    # -----------------------
    async def send_hide_and_mute(self, target, message_text):
        try:
            peer = await self.get_peer(target)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            sent_msg = await self.client.send_message(peer, message_text)
            asyncio.create_task(self._delayed_delete(sent_msg))

            # –ú—å—é—Ç –∏ –∞—Ä—Ö–∏–≤, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∞—Ç –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            if str(target) not in self.processed_chats:
                muted = await self.mute_chat(peer)
                archived = await self.archive_chat(peer)
                if muted and archived:
                    self.processed_chats.add(str(target))

            # –í—ã–∑–æ–≤ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
            if self.auto_responder:
                asyncio.create_task(self.auto_responder(peer, message_text))

            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ send_hide_and_mute –¥–ª—è {target}: {e}")
            return False

    # -----------------------
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    # -----------------------
    async def _delayed_delete(self, message):
        try:
            await asyncio.sleep(self.auto_delete_delay)
            await message.delete(revoke=False)
        except:
            pass

    # -----------------------
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 1 –º–µ—Å—è—Ü
    # -----------------------
    async def set_auto_delete_1_month(self, peer):
        try:
            await self.client(SetHistoryTTLRequest(peer=peer, period=2592000))
            return True
        except:
            return False

    # -----------------------
    # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π
    # -----------------------
    def clear_cache(self):
        processed = len(self.processed_chats)
        self.processed_chats.clear()
        self.entity_cache.clear()
        print(f"üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞: {processed} —á–∞—Ç–æ–≤ —Å–±—Ä–æ—à–µ–Ω–æ")

    # -----------------------
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    # -----------------------
    async def get_stats(self):
        try:
            me = await self.client.get_me()
            return {
                "account_name": me.first_name,
                "account_phone": me.phone,
                "processed_chats": len(self.processed_chats),
                "queued_messages": self.message_queue.qsize(),
            }
        except:
            return {
                "account_name": "Error",
                "account_phone": "Error",
                "processed_chats": len(self.processed_chats),
                "queued_messages": self.message_queue.qsize(),
            }
