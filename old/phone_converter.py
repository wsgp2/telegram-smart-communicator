#!/usr/bin/env python3
"""
üìû PhoneConverter - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ username/id
"""

import asyncio
import re
import json
import os
import random
from datetime import datetime
from typing import Optional, Dict, List
from telethon.tl.functions.contacts import ImportContactsRequest, DeleteContactsRequest
from telethon.tl.types import InputPhoneContact
from telethon.errors import FloodWaitError, RPCError, TypeNotFoundError


class PhoneConverter:
    def __init__(self, client, cache_file="data/phone_cache.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
        client: –æ–¥–∏–Ω Telethon –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        """
        self.client = client
        self.cache_file = cache_file
        self.cache = self._load_cache()
        self.conversion_log = []
        self.stats = {
            'total_attempted': 0,
            'successful_conversions': 0,
            'cache_hits': 0,
            'failed_conversions': 0,
            'session_errors': 0
        }

    def _load_cache(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à –∏–∑ —Ñ–∞–π–ª–∞"""
        if not os.path.exists(self.cache_file):
            os.makedirs(os.path.dirname(self.cache_file), exist_ok=True)
            return {}
        try:
            with open(self.cache_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
            return {}

    def _save_cache(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –≤ —Ñ–∞–π–ª"""
        try:
            os.makedirs(os.path.dirname(self.cache_file), exist_ok=True)
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(self.cache, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")

    def format_phone(self, phone: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ-—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        digits = re.sub(r'\D', '', str(phone).strip())

        if not digits:
            return phone

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
        if digits.startswith('7') and len(digits) == 11:
            return '+' + digits
        elif digits.startswith('8') and len(digits) == 11:
            return '+7' + digits[1:]
        elif len(digits) == 10 and digits[0] in '9438':
            return '+7' + digits
        elif not digits.startswith('+'):
            return '+' + digits
        else:
            return digits

    async def convert_phone_to_username(self, phone: str, max_retries: int = 2) -> Optional[str]:
        self.stats['total_attempted'] += 1

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
        formatted_phone = self.format_phone(phone)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if formatted_phone in self.cache:
            self.stats['cache_hits'] += 1
            self.conversion_log.append(f"üì¶ –ò–∑ –∫—ç—à–∞: {formatted_phone} -> {self.cache[formatted_phone]}")
            return self.cache[formatted_phone]

        # –ü—ã—Ç–∞–µ–º—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        for attempt in range(max_retries):
            try:
                result = await self._attempt_conversion(formatted_phone, attempt)
                if result:
                    self.cache[formatted_phone] = result
                    self._save_cache()
                    self.stats['successful_conversions'] += 1
                    self.conversion_log.append(f"‚úÖ –£—Å–ø–µ—Ö: {formatted_phone} -> {result}")
                    return result

            except FloodWaitError as e:
                wait_time = min(e.seconds, 300)  # –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
                print(f"‚è≥ FloodWait: –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(wait_time)
                continue

            except TypeNotFoundError as e:
                print(f"‚ùå TypeNotFoundError (9815cec8) - —Å–µ—Å—Å–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞")
                self.stats['session_errors'] += 1
                raise e  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

            except RPCError as e:
                error_msg = str(e).lower()
                if "9815cec8" in error_msg or "cannot get difference" in error_msg:
                    print(f"‚ùå –ò–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏: {e}")
                    self.stats['session_errors'] += 1
                    raise e  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                else:
                    self.conversion_log.append(f"‚ö†Ô∏è RPC –æ—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1} –¥–ª—è {formatted_phone}: {e}")

            except Exception as e:
                self.conversion_log.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1} –¥–ª—è {formatted_phone}: {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(random.uniform(2, 5))

        self.stats['failed_conversions'] += 1
        self.conversion_log.append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {formatted_phone}")
        return None

    async def _attempt_conversion(self, phone: str, attempt: int) -> Optional[str]:
        """–û–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""

        # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫
        try:
            entity = await asyncio.wait_for(
                self.client.get_entity(phone),
                timeout=15
            )
            if entity:
                identifier = self.extract_identifier(entity)
                if identifier:
                    self.conversion_log.append(f"üéØ –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω –¥–ª—è {phone}")
                    return identifier
        except asyncio.TimeoutError:
            self.conversion_log.append(f"‚è±Ô∏è Timeout –ø—Ä—è–º–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è {phone}")
        except TypeNotFoundError:
            raise 
        except RPCError as e:
            if "9815cec8" in str(e) or "cannot get difference" in str(e).lower():
                raise  
            else:
                self.conversion_log.append(f"‚ö†Ô∏è RPC –æ—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è {phone}: {str(e)[:50]}")
        except Exception as e:
            self.conversion_log.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è {phone}: {str(e)[:50]}")

        try:
            result = await self._method_import_contact(phone)
            if result:
                identifier = self.extract_identifier(result)
                if identifier:
                    self.conversion_log.append(f"üì± –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ —É—Å–ø–µ—à–µ–Ω –¥–ª—è {phone}")
                    return identifier
        except TypeNotFoundError:
            raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
        except RPCError as e:
            if "9815cec8" in str(e) or "cannot get difference" in str(e).lower():
                raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
            else:
                self.conversion_log.append(f"‚ö†Ô∏è RPC –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è {phone}: {str(e)[:50]}")
        except Exception as e:
            self.conversion_log.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è {phone}: {str(e)[:50]}")

        return None

    async def _method_import_contact(self, phone: str):
        try:
            # –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ë–ï–ó –∑–Ω–∞–∫–∞ + –¥–ª—è ImportContactsRequest
            phone_for_import = phone.replace('+', '')

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
            contact = InputPhoneContact(
                client_id=random.randint(0, 999999),
                phone=phone_for_import,
                first_name=f"TempUser{random.randint(1000, 9999)}",
                last_name=""
            )

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            result = await asyncio.wait_for(
                self.client(ImportContactsRequest([contact])),
                timeout=20
            )

            if result.users:
                user = result.users[0]

                # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
                try:
                    await asyncio.wait_for(
                        self.client(DeleteContactsRequest([user])),
                        timeout=10
                    )
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

                return user

            return None

        except asyncio.TimeoutError:
            self.conversion_log.append(f"‚è±Ô∏è Timeout –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ {phone}")
            return None
        except Exception as e:
            self.conversion_log.append(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ {phone}: {e}")
            return None

    def extract_identifier(self, entity) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç username –∏–ª–∏ ID –∏–∑ entity"""
        try:
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç username
            if hasattr(entity, 'username') and entity.username:
                return f"@{entity.username}"
            # –ï—Å–ª–∏ –Ω–µ—Ç username, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
            elif hasattr(entity, 'id') and entity.id:
                return str(entity.id)
        except:
            pass
        return None

    async def batch_convert(self, phones: List[str], max_concurrent: int = 2) -> Dict[str, str]:
        results = {}
        semaphore = asyncio.Semaphore(max_concurrent)

        async def process_phone(phone):
            async with semaphore:
                try:
                    await asyncio.sleep(random.uniform(1.0, 3.0))

                    result = await self.convert_phone_to_username(phone)
                    results[phone] = result

                    # –ü—Ä–æ–≥—Ä–µ—Å—Å
                    converted = len([r for r in results.values() if r])
                    total = len(results)
                    print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {total}/{len(phones)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, {converted} —É—Å–ø–µ—à–Ω–æ")

                    return result

                except (TypeNotFoundError, RPCError) as e:
                    error_msg = str(e).lower()
                    if "9815cec8" in error_msg or "cannot get difference" in error_msg:
                        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏: {e}")
                        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
                        results[phone] = None
                        return None
                    else:
                        print(f"‚ùå RPC –æ—à–∏–±–∫–∞ –¥–ª—è {phone}: {e}")
                        results[phone] = None
                        return None

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {phone}: {e}")
                    results[phone] = None
                    return None

        print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é {len(phones)} –Ω–æ–º–µ—Ä–æ–≤...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [process_phone(phone) for phone in phones]
        await asyncio.gather(*tasks, return_exceptions=True)

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        successful = len([r for r in results.values() if r])
        failed = len([r for r in results.values() if not r])

        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}")
        print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed}")
        print(f"   üì¶ –ò–∑ –∫—ç—à–∞: {self.stats['cache_hits']}")
        print(f"   üö´ –û—à–∏–±–∫–∏ —Å–µ—Å—Å–∏–∏: {self.stats['session_errors']}")

        return results

    def get_stats(self) -> Dict[str, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π"""
        return self.stats.copy()

    def get_log(self, clear: bool = False) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π"""
        log = self.conversion_log.copy()
        if clear:
            self.conversion_log.clear()
        return log

    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à"""
        self.cache.clear()
        if os.path.exists(self.cache_file):
            try:
                os.remove(self.cache_file)
            except:
                pass
        self.conversion_log.append("üßπ –ö—ç—à –æ—á–∏—â–µ–Ω")
        print("üßπ –ö—ç—à –Ω–æ–º–µ—Ä–æ–≤ –æ—á–∏—â–µ–Ω")

    async def check_client_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            me = await asyncio.wait_for(self.client.get_me(), timeout=10)
            return me is not None
        except (TypeNotFoundError, RPCError) as e:
            error_msg = str(e).lower()
            if "9815cec8" in error_msg or "cannot get difference" in error_msg:
                print(f"‚ùå –ö–ª–∏–µ–Ω—Ç –∏–º–µ–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: {e}")
                return False
            return False
        except Exception:
            return False


async def test_converter():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞"""
    from session_manager import SessionManager

    print("üß™ –¢–µ—Å—Ç PhoneConverter")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏–∏
    manager = SessionManager()
    sessions = await manager.load_sessions()

    if not sessions:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞")
        return

    client = sessions[0]
    converter = PhoneConverter(client)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∫–ª–∏–µ–Ω—Ç–∞
    if not await converter.check_client_health():
        print("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–µ–Ω")
        return

    # –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞
    test_phones = [
        "+79123456789",  # –ü—Ä–∏–º–µ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        "89123456789",  # –ë–µ–∑ +
        "9123456789"  # –ë–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
    ]

    print(f"üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(test_phones)} –Ω–æ–º–µ—Ä–æ–≤...")

    try:
        results = await converter.batch_convert(test_phones)

        print("\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:")
        for phone, result in results.items():
            if result:
                print(f"‚úÖ {phone} -> {result}")
            else:
                print(f"‚ùå {phone} -> –Ω–µ –Ω–∞–π–¥–µ–Ω")

        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {converter.get_stats()}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

    finally:
        await client.disconnect()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    asyncio.run(test_converter())
