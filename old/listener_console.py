#!/usr/bin/env python3
"""
üì° –û–¢–î–ï–õ–¨–ù–ê–Ø –ö–û–ù–°–û–õ–¨ –î–õ–Ø –ü–†–û–°–õ–£–®–ö–ò
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
"""
import asyncio
import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from telethon import events
from notification_bot import init_notification_bot, notification_bot
from auto_responder import init_auto_responder, get_auto_responder
from config import load_config


class ListenerConsole:
    def __init__(self):
        self.sessions = []
        self.is_listening = False

    async def setup_listeners(self, sessions):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
        self.sessions = sessions
        self.is_listening = True

        print("üéß –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–°–õ–£–®–ö–ò")
        print("=" * 60)

        for client in sessions:
            try:
                me = await client.get_me()
                client.sent_users = set()  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                from user_manager import UserManager
                user_manager = UserManager()
                users_data = await user_manager.load_all_users()
                processed_users = users_data["processed"]

                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                for user in processed_users:
                    try:
                        entity = await client.get_entity(user)
                        client.sent_users.add(entity.id)
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {user}: {e}")

                # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                self._create_message_handler(client)
                print(f"‚úÖ {me.first_name}: –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–ª—É—à–∫–µ")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {client}: {e}")

        print(f"\nüéØ –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–µ–º {len(processed_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("üí¨ –í—Å–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –∑–¥–µ—Å—å –∏ –≤ Telegram-–±–æ—Ç–µ")
        print("=" * 60)

    def _create_message_handler(self, client):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤—ã–≤–æ–¥–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –±–æ—Ç–∞"""

        @client.on(events.NewMessage(incoming=True))
        async def handler(event):
            try:
                sender = await event.get_sender()
                text = event.raw_text

                if not sender:
                    return

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ
                me = await event.client.get_me()

                # üî• –í–´–í–û–î –í –ö–û–ù–°–û–õ–¨ (—ç—Ç–æ –æ–∫–Ω–æ)
                timestamp = datetime.now().strftime("%H:%M:%S")
                print(f"\n[{timestamp}] üì© {sender.first_name} -> {me.first_name}:")
                print(f"   üí¨ {text}")
                print("   " + "‚îÄ" * 50)

                # üî• –û–¢–ü–†–ê–í–ö–ê –í –ë–û–¢–ê
                if notification_bot:
                    account_info = {
                        'phone': me.phone or 'Unknown',
                        'name': me.first_name or 'Unknown'
                    }
                    sender_info = {
                        'name': sender.first_name or 'Unknown',
                        'username': sender.username or 'No username'
                    }

                    await notification_bot.send_notification(account_info, sender_info, text)

                # ü§ñ –ê–í–¢–û–û–¢–í–ï–¢–ß–ò–ö - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –ø–æ–∫—É–ø–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                auto_responder = get_auto_responder()
                if auto_responder and auto_responder.enabled:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞
                        conversation_history = []
                        try:
                            messages = await client.get_messages(sender, limit=50)
                            conversation_history = [msg.message for msg in reversed(messages) if msg.message]
                            print(f"   üìä –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞: {len(conversation_history)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞")
                        except Exception as hist_e:
                            print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞: {hist_e}")
                        
                        ai_response = await auto_responder.process_user_message(sender, text, client, conversation_history)
                        if ai_response:
                            print(f"   ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç: {ai_response}")
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            await client.send_message(sender, ai_response)
                            print(f"   ‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sender.first_name}")
                    except Exception as e:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞: {e}")

                # üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É —Å–µ–±—è
                try:
                    await event.message.delete(revoke=False)
                except:
                    pass

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

    async def start_listening(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
        if not self.sessions:
            print("‚ùå –ù–µ—Ç —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è!")
            return

        print("\nüöÄ –ó–ê–ü–£–°–ö –ü–†–û–°–õ–£–®–ö–ò...")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("=" * 60)

        try:
            await asyncio.gather(*[client.run_until_disconnected() for client in self.sessions])
        except KeyboardInterrupt:
            print("\nüõë –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üì° –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–°–û–õ–ò –ü–†–û–°–õ–£–®–ö–ò")
    print("=" * 60)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    init_notification_bot()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫
    config = load_config()
    init_auto_responder(config)
    auto_responder = get_auto_responder()
    if auto_responder.enabled:
        print(f"ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω (AI: {auto_responder.ai_enabled})")
        print(f"   –ú–∞–∫—Å. –≤–æ–ø—Ä–æ—Å–æ–≤: {auto_responder.max_questions}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {len(auto_responder.conversations)}")
    else:
        print("ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤—ã–∫–ª—é—á–µ–Ω")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏–∏
    from session_manager import SessionManager
    session_manager = SessionManager()
    sessions = await session_manager.load_sessions()

    if not sessions:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π!")
        return

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∫—É
    listener = ListenerConsole()
    await listener.setup_listeners(sessions)
    await listener.start_listening()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏ –ø—Ä–æ—Å–ª—É—à–∫–∏")
