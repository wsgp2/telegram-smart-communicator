#!/usr/bin/env python3
"""
üóÇÔ∏è –ú–ï–ù–ï–î–ñ–ï–† –ß–ê–¢–û–í - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ú–¨–Æ–¢–ò–†–û–í–ê–ù–ò–ï –ò –ê–†–•–ò–í–ò–†–û–í–ê–ù–ò–ï
–°–∫—Ä—ã–≤–∞–µ—Ç —á–∞—Ç—ã —Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å—Ñ —Å–æ–æ–±—â–µ–Ω–∏—è
"""
import asyncio
import json
from telethon import TelegramClient
from telethon.tl.functions.account import UpdateNotifySettingsRequest
from telethon.tl.functions.folders import EditPeerFoldersRequest
from telethon.tl.functions.messages import SetHistoryTTLRequest
from telethon.tl.types import InputNotifyPeer, InputPeerNotifySettings, InputFolderPeer


class ChatManager:
    """üóÇÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä—ã—Ç–∏—è —á–∞—Ç–æ–≤"""

    def __init__(self, client):
        self.client = client
        self.auto_delete_delay = 4  # –ó–∞–¥–µ—Ä–∂–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (3-5 —Å–µ–∫)
        self.processed_chats = set()  # üéØ –ö—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤)

    async def mute_chat(self, peer, duration=2147483647):
        try:
            await self.client(UpdateNotifySettingsRequest(
                peer=InputNotifyPeer(peer),
                settings=InputPeerNotifySettings(
                    mute_until=duration,
                    sound=None,
                    show_previews=False
                )
            ))
            print(f"‚úÖ –ß–∞—Ç –∑–∞–º—å—é—á–µ–Ω: {peer}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º—å—é—Ç–∏–Ω–≥–∞ —á–∞—Ç–∞ {peer}: {e}")
            print(f"   –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...")
            try:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ edit_2fa
                entity = await self.client.get_entity(peer)
                await self.client.edit_2fa(entity, mute_until=duration)
                print(f"‚úÖ –ß–∞—Ç –∑–∞–º—å—é—á–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º: {peer}")
                return True
            except:
                print(f"   –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
                return False

    async def archive_chat(self, peer):
        """üìÇ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —á–∞—Ç (–ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –ø–∞–ø–∫—É –∞—Ä—Ö–∏–≤–∞)"""
        try:
            await self.client(EditPeerFoldersRequest(
                folder_peers=[InputFolderPeer(
                    peer=peer,
                    folder_id=1  # 1 = –ê—Ä—Ö–∏–≤
                )]
            ))
            print(f"‚úÖ –ß–∞—Ç –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω: {peer}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞ {peer}: {e}")
            return False

    async def hide_chat(self, username_or_id):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            if hasattr(username_or_id, 'id'):
                # –≠—Ç–æ –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ ID
                chat_id = username_or_id.id
            else:
                # –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞ username –∏–ª–∏ ID
                if isinstance(username_or_id, str) and username_or_id.startswith('@'):
                    username_or_id = username_or_id[1:]  # –£–±–∏—Ä–∞–µ–º @
                chat_id = str(username_or_id)

            # üéØ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
            if chat_id in self.processed_chats:
                print(f"‚úÖ –ß–∞—Ç {chat_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º—å—é—Ç+–∞—Ä—Ö–∏–≤ (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)")
                return True

            # –ü–æ–ª—É—á–∞–µ–º peer –æ–±—ä–µ–∫—Ç –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
            peer = await self.client.get_input_entity(username_or_id)

            # –ú—å—é—Ç–∏–º —á–∞—Ç (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑!)
            muted = await self.mute_chat(peer)

            # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —á–∞—Ç (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑!)
            archived = await self.archive_chat(peer)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
            if muted and archived:
                self.processed_chats.add(chat_id)
                print(f"üéØ –ß–∞—Ç {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—ç—à (–±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ–º –º—å—é—Ç–∏—Ç—å/–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å)")

            return muted and archived

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞ {username_or_id}: {e}")
            return False

    async def send_and_hide_message(self, target, message_text):
        """üì§‚û°Ô∏èüóëÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        try:
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {message_text}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = await self.client.send_message(target, message_text)
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(self._delayed_delete(sent_message))

            return sent_message

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None

    async def _delayed_delete(self, message):
        """üóëÔ∏è –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            await asyncio.sleep(self.auto_delete_delay)
            await message.delete(revoke=False)
        except Exception:
            pass

    async def delete_incoming_message(self, message):
        try:
            await message.delete(revoke=False)
        except Exception:
            pass

    async def send_hide_and_mute(self, target, message_text):
        print(f"\nüéØ –ü–û–õ–ù–´–ô –¶–ò–ö–õ –î–õ–Ø {target}")
        print("-" * 30)

        sent_message = await self.send_and_hide_message(target, message_text)
        if not sent_message:
            return False

        await asyncio.sleep(1)
        hidden = await self.hide_chat(target)

        if hidden:
            print(f"‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {target}")
            print(f"   üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            print(f"   üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 4 —Å–µ–∫")
            print(f"   üîá –ß–∞—Ç –∑–∞–º—å—é—á–µ–Ω")
            print(f"   üìÇ –ß–∞—Ç –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω")
        else:
            print(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ —á–∞—Ç –Ω–µ —Å–∫—Ä—ã—Ç")

        return hidden

    async def delete_incoming_message(self, message):
        """üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —É —Å–µ–±—è"""
        try:
            await message.delete(revoke=False)
            print(f"üóëÔ∏è –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ —É –Ω–∞—Å")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    async def set_auto_delete_1_month(self, peer):
        """‚è∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ 1 –º–µ—Å—è—Ü"""
        try:
            # TTL = 2592000 —Å–µ–∫—É–Ω–¥ = 30 –¥–Ω–µ–π = 1 –º–µ—Å—è—Ü
            await self.client(SetHistoryTTLRequest(
                peer=peer,
                period=2592000  # 1 –º–µ—Å—è—Ü –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            ))
            print(f"‚è∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–µ—Å—è—Ü: {peer}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è: {e}")
            return False

    def clear_processed_chats_cache(self):
        """üóëÔ∏è –û—á–∏—â–∞–µ–º –∫—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ (–¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ–∞–Ω—Å–∞)"""
        cleared_count = len(self.processed_chats)
        self.processed_chats.clear()
        print(f"üóëÔ∏è –û—á–∏—â–µ–Ω –∫—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ ({cleared_count} –∑–∞–ø–∏—Å–µ–π)")
        return cleared_count

    async def get_chat_manager_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–∞—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        try:
            me = await self.client.get_me()
            stats = self.get_optimization_stats()
            return {
                'account_name': me.first_name or 'Unknown',
                'account_phone': me.phone or 'No phone',
                'processed_chats': stats['processed_chats_count'],
                'saved_api_calls': stats['saved_api_calls'],
                'status': 'active'
            }
        except Exception as e:
            return {
                'account_name': 'Error',
                'account_phone': 'Error',
                'processed_chats': 0,
                'saved_api_calls': 0,
                'status': f'error: {e}'
            }
    def get_optimization_stats(self):
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return {
            'processed_chats_count': len(self.processed_chats),
            'saved_api_calls': len(self.processed_chats) * 2  # 2 –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —á–∞—Ç (–º—å—é—Ç + –∞—Ä—Ö–∏–≤)
        }
