#!/usr/bin/env python3
"""
ü§ñ –ü–†–û–°–¢–û–ô –ë–û–¢ –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô (HTTP API)
–ü—Ä–∏–Ω—Ü–∏–ø 20/80: –º–∏–Ω–∏–º—É–º –∫–æ–¥–∞, –º–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
"""
import aiohttp
import asyncio
import json
from datetime import datetime


class NotificationBot:
    def __init__(self, bot_token, group_chat_id):
        self.bot_token = bot_token
        self.group_chat_id = group_chat_id
        self.notification_count = 0
        self.api_url = f"https://api.telegram.org/bot{bot_token}"

    async def send_notification(self, account_info, sender_info, message_text):
        """
        ‚ö° –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ HTTP API
        20% –∫–æ–¥–∞, 80% —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏!
        """
        self.notification_count += 1

        # üéØ –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å —Ç–æ—á–∫–∞–º–∏ (–í–∞—Ä–∏–∞–Ω—Ç 3)
        notification = f"""‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢
    üîî <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–ï #{self.notification_count:03d}</b>
‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢

üì± <b>–ê–∫–∫–∞—É–Ω—Ç:</b> <code>{account_info['phone']}</code> ({account_info['name']})
üë§ <b>–û—Ç –∫–æ–≥–æ:</b> {sender_info['name']} {f"(@{sender_info['username']})" if sender_info['username'] else ""}
üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message_text}
üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

‚àò ‚àò ‚àò ‚àò ‚àò ‚àò ‚àò ‚àò ‚àò ‚àò ‚àò ‚àò ‚àò ‚àò ‚àò ‚àò ‚àò ‚àò ‚àò ‚àò ‚àò ‚àò ‚àò ‚àò ‚àò"""

        await self._send_to_group(notification)

    async def send_security_notification(self, account_info, sender_info, message_text, message_type="üîê –°–õ–£–ñ–ï–ë–ù–û–ï"):
        """
        üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–∫–æ–¥—ã –≤—Ö–æ–¥–∞, –Ω–æ–≤—ã–µ –≤—Ö–æ–¥—ã)
        """
        self.notification_count += 1

        # üö® –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –î–ò–ó–ê–ô–ù –î–õ–Ø –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
        notification = f"""üö® üö® üö® üö® üö® üö® üö® üö® üö® üö® üö® üö® üö® üö® üö® üö® üö®
    {message_type} <b>#{self.notification_count:03d}</b>
üö® üö® üö® üö® üö® üö® üö® üö® üö® üö® üö® üö® üö® üö® üö® üö® üö®

üì± <b>–ê–∫–∫–∞—É–Ω—Ç:</b> <code>{account_info['phone']}</code> ({account_info['name']})
‚ö†Ô∏è <b>–û—Ç –∫–æ–≥–æ:</b> {sender_info['name']}
üì® <b>–í–ê–ñ–ù–û:</b> {message_text}
üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

‚ö° ‚ö° ‚ö° ‚ö° ‚ö° ‚ö° ‚ö° ‚ö° ‚ö° ‚ö° ‚ö° ‚ö° ‚ö° ‚ö° ‚ö° ‚ö° ‚ö°"""

        await self._send_to_group(notification)

    async def _send_to_group(self, notification):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É"""

        try:
            async with aiohttp.ClientSession() as session:
                data = {
                    'chat_id': self.group_chat_id,
                    'text': notification,
                    'parse_mode': 'HTML'
                }

                async with session.post(f"{self.api_url}/sendMessage", json=data) as response:
                    if response.status == 200:
                        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{self.notification_count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É")
                    else:
                        error_text = await response.text()
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status} - {error_text}")

        except Exception as e:
            print(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")

    async def test_connection(self):
        """üîß –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –≥—Ä—É–ø–ø–æ–π"""
        try:
            async with aiohttp.ClientSession() as session:
                data = {
                    'chat_id': self.group_chat_id,
                    'text': 'ü§ñ –ë–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!',
                    'parse_mode': 'HTML'
                }

                async with session.post(f"{self.api_url}/sendMessage", json=data) as response:
                    if response.status == 200:
                        print("‚úÖ –¢–µ—Å—Ç –±–æ—Ç–∞ —É—Å–ø–µ—à–µ–Ω! –ì—Ä—É–ø–ø–∞ –ø–æ–ª—É—á–∏–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                        return True
                    else:
                        print(f"‚ùå –¢–µ—Å—Ç –±–æ—Ç–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω: {response.status}")
                        return False

        except Exception as e:
            print(f"üî¥ –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –±–æ—Ç–∞: {e}")
            return False

    async def send_shutdown_notification(self):
        """üì¥ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                data = {
                    'chat_id': self.group_chat_id,
                    'text': 'üì¥ <b>–ë–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É</b>\n'
                            f'üïê –í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {datetime.now().strftime("%d.%m.%Y %H:%M:%S")}\n'
                            f'üìä –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <code>{self.notification_count}</code>',
                    'parse_mode': 'HTML'
                }

                async with session.post(f"{self.api_url}/sendMessage", json=data) as response:
                    if response.status == 200:
                        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏: {response.status}")
                        return False

        except Exception as e:
            print(f"üî¥ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏: {e}")
            return False


# üì¶ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
notification_bot = None


def init_notification_bot():
    """‚ö° –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    global notification_bot

    BOT_TOKEN = "8232028536:AAGTCLsTVkOsLy4JJa3nZiJEg62IRLkWhpM"
    GROUP_CHAT_ID = "-1003073517667"

    notification_bot = NotificationBot(BOT_TOKEN, GROUP_CHAT_ID)
    print("ü§ñ Notification Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return notification_bot


async def notify_admin_via_bot(sender, text, receiving_client):
    """
    üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
    –ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—É—é notify_admin()
    """
    if not notification_bot:
        return

    try:
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ–ª—É—á–∏–≤—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        me = await receiving_client.get_me()
        account_info = {
            'phone': me.phone,
            'name': me.first_name or 'Unknown'
        }

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        sender_info = {
            'name': sender.first_name or 'Unknown',
            'username': sender.username
        }

        await notification_bot.send_notification(
            account_info, sender_info, text
        )

    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞: {e}")


# üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
async def test_bot():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –±–æ—Ç–∞"""
    init_notification_bot()

    # –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    success = await notification_bot.test_connection()

    if success:
        # –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        fake_account = {'phone': '+919313919689', 'name': 'Sergey D.'}
        fake_sender = {'name': '–¢–µ—Å—Ç –Æ–∑–µ—Ä', 'username': 'test_user'}

        await notification_bot.send_notification(
            fake_account, fake_sender, "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã!"
        )


if __name__ == "__main__":
    asyncio.run(test_bot())