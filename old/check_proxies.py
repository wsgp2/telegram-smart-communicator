#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ HTTP –ø—Ä–æ–∫—Å–∏
"""

import subprocess
import time
import concurrent.futures
from typing import List, Dict, Tuple

def load_proxies(file_path: str = "proxies/proxy.txt") -> List[Dict[str, str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    proxies = []
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            for line_num, line in enumerate(f, 1):
                line = line.strip()
                if line and not line.startswith('#'):
                    parts = line.split(':')
                    if len(parts) == 4:
                        proxies.append({
                            'host': parts[0],
                            'port': int(parts[1]),
                            'username': parts[2],
                            'password': parts[3],
                            'line': line_num,
                            'raw': line
                        })
                    else:
                        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ {line_num}: {line}")
        
        print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(proxies)} –ø—Ä–æ–∫—Å–∏ –∏–∑ {file_path}")
        return proxies
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return []

def test_proxy(proxy: Dict[str, str], timeout: int = 7) -> Tuple[bool, str, float]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ curl (SOCKS5 –ø—Ä–æ–∫—Å–∏)"""
    start_time = time.time()
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º curl –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SOCKS5 –ø—Ä–æ–∫—Å–∏
        cmd = [
            'curl', 
            '--socks5-hostname', f"{proxy['host']}:{proxy['port']}",
            '--proxy-user', f"{proxy['username']}:{proxy['password']}",
            '--connect-timeout', str(timeout),
            '--max-time', str(timeout),
            '--silent',
            '--show-error',
            'http://httpbin.org/ip'
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=timeout+5)
        elapsed = time.time() - start_time
        
        if result.returncode == 0:
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP
            try:
                import json
                data = json.loads(result.stdout)
                ip = data.get('origin', 'Unknown IP')
                return True, ip, elapsed
            except:
                return True, "Response OK", elapsed
        else:
            error_msg = result.stderr.strip() if result.stderr else f"Exit code {result.returncode}"
            if len(error_msg) > 50:
                error_msg = error_msg[:47] + "..."
            return False, error_msg, elapsed
            
    except subprocess.TimeoutExpired:
        elapsed = time.time() - start_time
        return False, "Timeout", elapsed
    except Exception as e:
        elapsed = time.time() - start_time
        error_msg = str(e)
        if len(error_msg) > 50:
            error_msg = error_msg[:47] + "..."
        return False, error_msg, elapsed

def check_all_proxies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ø—Ä–æ–∫—Å–∏"""
    print("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –ü–†–û–ö–°–ò")
    print("=" * 60)
    
    proxies = load_proxies()
    if not proxies:
        print("‚ùå –ù–µ—Ç –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!")
        return
    
    working_proxies = []
    failed_proxies = []
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(proxies)} –ø—Ä–æ–∫—Å–∏ (—Ç–∞–π–º–∞—É—Ç: 7 —Å–µ–∫ –∫–∞–∂–¥—ã–π)...")
    print("")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤—ã–≤–æ–¥–∞)
    for i, proxy in enumerate(proxies, 1):
        print(f"[{i:2}/{len(proxies)}] –¢–µ—Å—Ç–∏—Ä—É–µ–º {proxy['host']}:{proxy['port']}...", end=" ")
        
        success, result, elapsed = test_proxy(proxy)
        
        if success:
            print(f"‚úÖ OK ({elapsed:.1f}s) - IP: {result}")
            working_proxies.append({**proxy, 'response_time': elapsed, 'ip': result})
        else:
            print(f"‚ùå FAIL ({elapsed:.1f}s) - {result}")
            failed_proxies.append({**proxy, 'error': result, 'response_time': elapsed})
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("")
    print("=" * 60)
    print("üìä –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò:")
    print(f"‚úÖ –†–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏: {len(working_proxies)}")
    print(f"‚ùå –ù–µ—Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏: {len(failed_proxies)}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {len(working_proxies)/len(proxies)*100:.1f}%")
    
    # –¢–æ–ø —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏ (–ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏)
    if working_proxies:
        print("")
        print("üèÜ –¢–û–ü-5 –ë–´–°–¢–†–´–• –ü–†–û–ö–°–ò:")
        sorted_proxies = sorted(working_proxies, key=lambda x: x['response_time'])
        for i, proxy in enumerate(sorted_proxies[:5], 1):
            print(f"  {i}. {proxy['host']}:{proxy['port']} - {proxy['response_time']:.1f}s - {proxy['ip']}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏
    if working_proxies:
        with open('proxies/working_proxies.txt', 'w', encoding='utf-8') as f:
            for proxy in working_proxies:
                f.write(proxy['raw'] + '\n')
        print(f"\nüíæ –†–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: proxies/working_proxies.txt")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ—Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏
    if failed_proxies:
        with open('proxies/failed_proxies.txt', 'w', encoding='utf-8') as f:
            for proxy in failed_proxies:
                f.write(f"{proxy['raw']} # ERROR: {proxy['error']}\n")
        print(f"üóëÔ∏è –ù–µ—Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: proxies/failed_proxies.txt")

if __name__ == "__main__":
    print("üîç –ü–†–û–í–ï–†–ö–ê –ü–†–û–ö–°–ò –°–ï–†–í–ï–†–û–í")
    print("–ê–≤—Ç–æ—Ä: Telegram Smart Communicator")
    print("")
    
    try:
        check_all_proxies()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    print("\nüèÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
