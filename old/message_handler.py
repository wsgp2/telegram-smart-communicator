import asyncio
import random
from telethon import events
from notification_bot import notification_bot, init_notification_bot
from user_manager import UserManager
from utils import load_messages_from_file, log_error, log_info, log_warning, add_message_to_file, get_messages_count
import os
import logging
import aiofiles
import json


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
def setup_logger():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ö–æ–Ω—Ñ–∏–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    config = {
        "log_file": "logs/app.log",
        "log_level": "INFO",
        "enable_file_logging": True,
        "enable_console_logging": True
    }

    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
    try:
        with open("config.json", "r") as f:
            file_config = json.load(f)
            config.update(file_config)
    except:
        pass

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
    log_dir = os.path.dirname(config["log_file"])
    if log_dir and not os.path.exists(log_dir):
        os.makedirs(log_dir)

    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger('mass_sender')
    logger.setLevel(getattr(logging, config["log_level"]))

    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )

    # –§–∞–π–ª–æ–≤—ã–π handler
    if config["enable_file_logging"]:
        file_handler = logging.FileHandler(config["log_file"], encoding='utf-8')
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)

    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π handler
    if config["enable_console_logging"]:
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)

    return logger


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
logger = setup_logger()


def log_error(message, exc_info=False):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    logger.error(message, exc_info=exc_info)


def log_info(message):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    logger.info(message)


def log_warning(message):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
    logger.warning(message)


def log_debug(message):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    logger.debug(message)


async def load_messages_from_file(messages_file):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(messages_file):
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_messages = [
            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù–µ —Å–º–æ–≥ –¥–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è ‚Äî –ø–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –µ—â—ë –∞–∫—Ç—É–∞–ª—å–Ω–∞?",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–µ –¥–æ–∑–≤–æ–Ω–∏–ª—Å—è, –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø–æ–∫—É–ø–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è?",
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è ‚Äî –ø–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤—Å—ë –µ—â—ë –≤ –ø–ª–∞–Ω–∞—Ö?",
            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù–µ –¥–æ–∑–≤–æ–Ω–∏–ª—Å—è, –≤–æ–ø—Ä–æ—Å –ø–æ –ø–æ–∫—É–ø–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ—Å—Ç–∞—ë—Ç—Å—è?",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è ‚Äî –ø–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –µ—â—ë –Ω—É–∂–Ω–∞?"
        ]

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        os.makedirs(os.path.dirname(messages_file), exist_ok=True)

        async with aiofiles.open(messages_file, 'w', encoding='utf-8') as f:
            for msg in default_messages:
                await f.write(f"{msg}\n")

        log_info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_file}")
        return default_messages

    try:
        async with aiofiles.open(messages_file, 'r', encoding='utf-8') as f:
            content = await f.read()
            messages = [line.strip() for line in content.splitlines() if line.strip()]

        if not messages:
            log_warning(f"–§–∞–π–ª —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç: {messages_file}")
            return await load_default_messages()

        log_info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {messages_file}")
        return messages

    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return await load_default_messages()


async def load_default_messages():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    default_messages = [
        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù–µ —Å–º–æ–≥ –¥–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è ‚Äî –ø–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –µ—â—ë –∞–∫—Ç—É–∞–ª—å–Ω–∞?",
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–µ –¥–æ–∑–≤–æ–Ω–∏–ª—Å—è, –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø–æ–∫—É–ø–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è?",
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è ‚Äî –ø–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤—Å—ë –µ—â—ë –≤ –ø–ª–∞–Ω–∞—Ö?"
    ]
    log_warning("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    return default_messages


async def add_message_to_file(messages_file, message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
    try:
        async with aiofiles.open(messages_file, 'a', encoding='utf-8') as f:
            await f.write(f"{message}\n")
        log_info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        return True
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False


async def get_messages_count(messages_file):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        messages = await load_messages_from_file(messages_file)
        return len(messages)
    except:
        return 0


class MessageHandler:
    def __init__(self):
        self.user_manager = UserManager()
        self.config = self._load_config()
        self.messages = []

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º messages_file –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            messages_file = self.config.get("messages_file", "data/messages.txt")
            self.messages = await load_messages_from_file(messages_file)
            if not self.messages:
                log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
                return False
            log_info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            return True
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MessageHandler: {e}")
            return False

    def _load_config(self):
        try:
            import json
            with open("config.json", "r") as f:
                return json.load(f)
        except:
            return {}


    def is_telegram_service_message(self, event, sender):
        if not sender:
            return False

        text = event.message.text if event and event.message else ""

        if hasattr(sender, 'id') and sender.id in [777000, 42777]:
            return True

        if hasattr(sender, 'phone') and sender.phone == '42777':
            return True

        if hasattr(sender, 'username') and sender.username and sender.username.lower() == 'telegram':
            return True

        if hasattr(sender, 'first_name') and sender.first_name and sender.first_name.strip() == 'Telegram':
            return True

        if text:
            text_lower = text.lower()
            service_patterns = [
                '–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ telegram', 'login code for telegram',
                'your telegram code', '–≤–∞—à –∫–æ–¥ telegram',
                'new login to your telegram account', '–Ω–æ–≤—ã–π –≤—Ö–æ–¥ –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç telegram'
            ]

            for pattern in service_patterns:
                if pattern in text_lower:
                    return True

            import re
            code_match = re.search(r'\b\d{5,6}\b', text)
            if code_match and ('telegram' in text_lower and ('–∫–æ–¥' in text_lower or 'code' in text_lower)):
                return True

        return False

    async def notify_telegram_service(self, sender, text, client):
        if not notification_bot:
            return

        try:
            me = await client.get_me()
            message_type = "üîê –°–õ–£–ñ–ï–ë–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï"

            if '–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞' in text.lower() or 'login code' in text.lower():
                message_type = "üîë –ö–û–î –í–•–û–î–ê"
            elif 'new login' in text.lower() or '–Ω–æ–≤—ã–π –≤—Ö–æ–¥' in text.lower():
                message_type = "üö® –ù–û–í–´–ô –í–•–û–î"

            account_info = {'phone': me.phone, 'name': me.first_name or 'Unknown'}
            sender_info = {
                'name': sender.first_name or 'Telegram',
                'username': getattr(sender, 'username', 'telegram_service')
            }

            await notification_bot.send_security_notification(account_info, sender_info, text, message_type)

        except Exception as e:
            log_error(f"Error sending service notification: {e}")


        except Exception as e:
            # –¢–∏—Ö–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –Ω–µ —Å–ø–∞–º–∏–º –∫–æ–Ω—Å–æ–ª—å
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ (—Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º): {e}")

    async def send_messages(self, sessions, users, message, delay_ms, msgs_per_acc):
        if not users or not sessions:
            log_warning("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ —Å–µ—Å—Å–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return 0
        if not self.messages:
            log_warning("–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å...")
            success = await self.initialize()
            if not success:
                log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return 0

        total_sent = 0
        random.shuffle(users)


        tasks = []
        for client in sessions:
            task = self._send_for_client(client, users, message, delay_ms, msgs_per_acc)
            tasks.append(task)

        try:
            results = await asyncio.gather(*tasks, return_exceptions=True)

            for result in results:
                if isinstance(result, int):
                    total_sent += result
                elif isinstance(result, Exception):
                    log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {result}", exc_info=True)

            log_info(f"–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_sent}")

        except Exception as e:
            log_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}", exc_info=True)

        return total_sent

    async def _send_for_client(self, client, users, message, delay_ms, msgs_per_acc):
        try:
            me = await client.get_me()
            sent_count = 0

            for i in range(min(msgs_per_acc, len(users))):
                if not users:
                    break

                target = users.pop()
                try:
                    entity = await client.get_entity(target)

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if self.messages:
                        random_message = random.choice(self.messages)
                    else:
                        random_message = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù–µ —Å–º–æ–≥ –¥–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è ‚Äî –ø–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –µ—â—ë –∞–∫—Ç—É–∞–ª—å–Ω–∞?"

                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTL –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                    if self.config.get('auto_ttl_messages', False) and hasattr(client, 'chat_manager'):
                        await client.chat_manager.set_auto_delete_1_month(entity)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    sent_message = await client.send_message(entity, random_message)

                    # üî• –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –í–´–í–û–î: —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
                    print(f"‚úÖ {me.first_name} -> {target}")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
                    client.sent_users.add(entity.id)
                    sent_count += 1

                    # üóëÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –∏ —Å–∫—Ä—ã–≤–∞–µ–º
                    if hasattr(client, 'chat_manager'):
                        try:
                            await client.chat_manager._delayed_delete(sent_message)
                            await client.chat_manager.hide_chat(target)
                        except Exception:
                            pass  # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏

                    # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
                    await self.user_manager.mark_as_processed([target])

                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    base_delay = delay_ms / 1000.0
                    jitter = random.uniform(-0.355, 0.355)
                    await asyncio.sleep(max(0.1, base_delay + jitter))

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {target}: {e}")

            return sent_count

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return 0

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ _send_for_client: {e}")
            return 0

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –≤ _send_for_client: {e}", exc_info=True)
            return 0