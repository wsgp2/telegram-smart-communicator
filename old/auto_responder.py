#!/usr/bin/env python3
"""
AUTO RESPONDER - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å–Ω–∏–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Mass Sender –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –º–∞—Ä–∫–∏ –∏ –±—é–¥–∂–µ—Ç–∞ —É –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤

–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ chatbot_export –Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏.
"""

import asyncio
import random
import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, field

from notification_bot import notification_bot


@dataclass
class ConversationContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã —Å –∫–ª–∏–µ–Ω—Ç–æ–º"""
    user_id: str                              # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è Telegram —ç—Ç–æ sender.id)
    username: str                             # Username –∫–ª–∏–µ–Ω—Ç–∞
    phone: Optional[str] = None               # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    first_name: Optional[str] = None          # –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
    message_history: List[Dict[str, str]] = field(default_factory=list)
    last_message_time: datetime = field(default_factory=datetime.now)
    questions_asked: int = 0                  # –°–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —É–∂–µ –∑–∞–¥–∞–ª–∏
    responses_received: int = 0               # –°–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—É—á–∏–ª–∏
    car_brand: Optional[str] = None           # –í—ã—è—Å–Ω–µ–Ω–Ω–∞—è –º–∞—Ä–∫–∞ –∞–≤—Ç–æ
    budget: Optional[str] = None              # –í—ã—è—Å–Ω–µ–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç
    is_interested: bool = True                # –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç
    conversation_complete: bool = False       # –ó–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –æ–ø—Ä–æ—Å
    created_at: datetime = field(default_factory=datetime.now)


class CarInterestPrompts:
    """AI –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –ø–æ–∫—É–ø–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    
    INITIAL_INTEREST_CHECK = """
    –¢—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. 
    –ö–ª–∏–µ–Ω—Ç —Ä–∞–Ω–µ–µ –ø—Ä–æ—è–≤–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø–æ–∫—É–ø–∫–µ –∞–≤—Ç–æ.
    
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¥–µ–ª–∏–∫–∞—Ç–Ω–æ –≤—ã—è—Å–Ω–∏—Ç—å:
    1. –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å –∞–∫—Ç—É–∞–ª–µ–Ω
    2. –ö–∞–∫—É—é –º–∞—Ä–∫—É/–º–æ–¥–µ–ª—å —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç
    3. –ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –ø–ª–∞–Ω–∏—Ä—É–µ—Ç
    
    –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º.
    –ù–µ –Ω–∞–≤—è–∑—ã–≤–∞–π—Å—è, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω.
    –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ - 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º.
    """
    
    BRAND_QUESTION = """
    –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø–æ–∫—É–ø–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.
    –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –º–∞—Ä–∫–µ/–º–æ–¥–µ–ª–∏.
    
    –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –æ —Ç–æ–º, –∫–∞–∫—É—é –º–∞—Ä–∫—É –∏–ª–∏ –º–æ–¥–µ–ª—å –æ–Ω —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç.
    –ú–æ–∂–µ—à—å —É–ø–æ–º—è–Ω—É—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏.
    –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º - 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
    """
    
    BUDGET_QUESTION = """
    –ö–ª–∏–µ–Ω—Ç –Ω–∞–∑–≤–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –º–∞—Ä–∫—É –∞–≤—Ç–æ.
    –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –¥–µ–ª–∏–∫–∞—Ç–Ω–æ –≤—ã—è—Å–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç.
    
    –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –æ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–º –±—é–¥–∂–µ—Ç–µ –∏–ª–∏ —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.
    –ë—É–¥—å —Ç–∞–∫—Ç–∏—á–Ω—ã–º –∏ –Ω–µ –¥–∞–≤—è—â–∏–º.
    1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–∞–∫—Å–∏–º—É–º.
    """
    
    COMPLETION_MESSAGE = """
    –ö–ª–∏–µ–Ω—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∫–µ –∏ –±—é–¥–∂–µ—Ç–µ.
    –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –µ–≥–æ –∏ —Å–∫–∞–∂–∏, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –Ω–∏–º —Å–≤—è–∂–µ—Ç—Å—è.
    
    –ë—É–¥—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º.
    1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
    """
    
    @classmethod
    def get_prompt_for_stage(cls, context: ConversationContext, user_message: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–¥–∏–∏ –æ–ø—Ä–æ—Å–∞"""
        
        base_context = f"""
        –ö–ª–∏–µ–Ω—Ç: {context.username or context.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}
        –í–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞–Ω–æ: {context.questions_asked}
        –û—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {context.responses_received}
        –ò–∑–≤–µ—Å—Ç–Ω–∞—è –º–∞—Ä–∫–∞: {context.car_brand or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}
        –ò–∑–≤–µ—Å—Ç–Ω—ã–π –±—é–¥–∂–µ—Ç: {context.budget or '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}
        
        –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: "{user_message}"
        """
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–¥–∏—é
        if context.questions_asked == 0:
            return cls.INITIAL_INTEREST_CHECK + "\n" + base_context
        elif context.car_brand is None:
            return cls.BRAND_QUESTION + "\n" + base_context  
        elif context.budget is None:
            return cls.BUDGET_QUESTION + "\n" + base_context
        else:
            return cls.COMPLETION_MESSAGE + "\n" + base_context


class AutoResponder:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å–Ω–∏–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤, –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö –≤ –ø–æ–∫—É–ø–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –≤ –ø–æ–∫—É–ø–∫–µ –∞–≤—Ç–æ
    - –í—ã—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–π –º–∞—Ä–∫–∏/–º–æ–¥–µ–ª–∏
    - –í—ã—è—Å–Ω–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞
    - –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º —á–µ—Ä–µ–∑ –±–æ—Ç
    """
    
    def __init__(self, config: Dict[str, Any]):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞"""
        self.config = config
        self.auto_responder_config = config.get('auto_responder', {})
        self.enabled = self.auto_responder_config.get('enabled', False)
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
        self.conversations: Dict[str, ConversationContext] = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ä–æ—Å–∞
        self.max_questions = self.auto_responder_config.get('max_questions', 3)
        self.response_timeout_hours = self.auto_responder_config.get('response_timeout_hours', 24)
        self.ai_enabled = self.auto_responder_config.get('ai_enabled', True)
        
        # AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.ai_config = self.auto_responder_config.get('ai', {})
        self.openai_api_key = self.ai_config.get('api_key', '')
        self.model = self.ai_config.get('model', 'gpt-4o-mini')
        self.max_tokens = self.ai_config.get('max_tokens', 100)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'conversations_started': 0,
            'questions_asked': 0,
            'leads_completed': 0,
            'cars_identified': 0,
            'budgets_collected': 0
        }
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –∞–≤—Ç–æ
        self.car_interest_keywords = [
            # –ü–æ–∫—É–ø–∫–∞
            '–∫—É–ø–∏—Ç—å', '–ø–æ–∫—É–ø–∫–∞', '–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏', '–≤–∑—è—Ç—å', '–Ω—É–∂–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å', 
            '–Ω—É–∂–Ω–∞ –º–∞—à–∏–Ω–∞', '–∏—â—É –∞–≤—Ç–æ', '—Ö–æ—á—É –º–∞—à–∏–Ω—É',
            # –ú–∞—Ä–∫–∏
            'toyota', 'honda', 'bmw', 'mercedes', 'audi', 'volkswagen', 
            'kia', 'hyundai', 'nissan', 'mazda', 'subaru', 'lexus',
            'lada', 'renault', 'peugeot', 'ford', 'chevrolet', 'skoda',
            # –¢–∏–ø—ã –∞–≤—Ç–æ
            '—Å–µ–¥–∞–Ω', '—Ö—ç—Ç—á–±–µ–∫', '–∫—Ä–æ—Å—Å–æ–≤–µ—Ä', '–¥–∂–∏–ø', '–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫',
            '—É–Ω–∏–≤–µ—Ä—Å–∞–ª', '–∫—É–ø–µ', '–∫–∞–±—Ä–∏–æ–ª–µ—Ç', '–º–∏–Ω–∏–≤—ç–Ω',
            # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            '–∞–≤—Ç–æ–º–∞—Ç', '–º–µ—Ö–∞–Ω–∏–∫–∞', '–ø–æ–ª–Ω—ã–π –ø—Ä–∏–≤–æ–¥', '–ø–µ—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–≤–æ–¥',
            '–±–µ–Ω–∑–∏–Ω', '–¥–∏–∑–µ–ª—å', '–≥–∏–±—Ä–∏–¥', '—ç–ª–µ–∫—Ç—Ä–æ',
            # –ë—é–¥–∂–µ—Ç
            '—Ä—É–±–ª–µ–π', '—Ç—ã—Å—è—á', '–º–∏–ª–ª–∏–æ–Ω', '–±—é–¥–∂–µ—Ç', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å',
            '–¥–µ—à–µ–≤—ã–π', '–¥–æ—Ä–æ–≥–æ–π', '–Ω–µ–¥–æ—Ä–æ–≥–æ', '–¥–æ', '–æ—Ç', '–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö'
        ]
        
        print(f"ü§ñ AutoResponder –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–≤–∫–ª—é—á–µ–Ω: {self.enabled})")
    
    async def is_car_interest_message(self, message_text: str, conversation_history: List[str] = None) -> bool:
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –ø–æ–∫—É–ø–∫–µ –∞–≤—Ç–æ –ø–æ –≤—Å–µ–º—É —á–∞—Ç—É (–¥–æ 50 —Å–æ–æ–±—â–µ–Ω–∏–π)"""
        
        if not self.ai_enabled or not self.ai_config.get('api_key'):
            # Fallback –Ω–∞ —Ö–∞—Ä–¥–∫–æ–¥ –µ—Å–ª–∏ –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            return self._is_car_interest_fallback(message_text)
            
        try:
            import openai
            import os
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–¥–æ 50 —Å–æ–æ–±—â–µ–Ω–∏–π)
            if conversation_history:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å–ª–∏ –±–æ–ª—å—à–µ
                messages_to_analyze = conversation_history[-50:] if len(conversation_history) > 50 else conversation_history
                full_context = "\n".join(messages_to_analyze)
            else:
                full_context = message_text
            
            # –ü—Ä–æ–º–ø—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞
            system_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –ø–æ–∫—É–ø–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. 

–ó–ê–î–ê–ß–ê: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –ø—Ä–æ—è–≤–ª—è–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø–æ–∫—É–ø–∫–µ, –ø—Ä–æ–¥–∞–∂–µ –∏–ª–∏ –æ–±–º–µ–Ω—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è.

–ü–†–ò–ó–ù–ê–ö–ò –ò–ù–¢–ï–†–ï–°–ê:
- –Ø–≤–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∫—É–ø–∏—Ç—å, –ø—Ä–æ–¥–∞—Ç—å, –æ–±–º–µ–Ω—è—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
- –í–æ–ø—Ä–æ—Å—ã –æ —Ü–µ–Ω–∞—Ö, –º–æ–¥–µ–ª—è—Ö, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –∞–≤—Ç–æ
- –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–∞—Ä–æ–∫, –º–æ–¥–µ–ª–µ–π
- –û–±—Å—É–∂–¥–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∞–≤—Ç–æ
- –ò–Ω—Ç–µ—Ä–µ—Å –∫ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞–º, –¥–∏–ª–µ—Ä–∞–º
- –í–æ–ø—Ä–æ—Å—ã –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö/–ª–∏–∑–∏–Ω–≥–µ –Ω–∞ –∞–≤—Ç–æ

–ù–ï –ò–ù–¢–ï–†–ï–°:
- –û–±—â–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
- –†–µ–º–æ–Ω—Ç –ª–∏—á–Ω–æ–≥–æ –∞–≤—Ç–æ
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∞–≤—Ç–æ
- –°–ª—É—á–∞–π–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –º–∞—Ä–æ–∫ –≤ –¥—Ä—É–≥–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ

–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ '–î–ê' –µ—Å–ª–∏ –µ—Å—Ç—å —è–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø–æ–∫—É–ø–∫–µ/–ø—Ä–æ–¥–∞–∂–µ –∞–≤—Ç–æ, –∏–ª–∏ '–ù–ï–¢' –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –Ω–µ—Ç."""

            # –ü—Ä–æ–∫—Å–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
            proxy_config = self.ai_config.get('proxy', {})
            original_proxy_env = {}
            
            if proxy_config.get('enabled', False):
                proxy_url = proxy_config.get('url')
                if proxy_url:
                    for key in ['HTTP_PROXY', 'HTTPS_PROXY']:
                        original_proxy_env[key] = os.environ.get(key)
                        os.environ[key] = proxy_url
            
            try:
                client = openai.OpenAI(api_key=self.ai_config.get('api_key'))
                
                response = client.chat.completions.create(
                    model=self.ai_config.get('model', 'gpt-4o-mini'),
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n{full_context}"}
                    ],
                    max_tokens=10,  # –ù—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –î–ê/–ù–ï–¢ –æ—Ç–≤–µ—Ç
                    temperature=0.1  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                )
                
                reply = response.choices[0].message.content.strip().upper()
                is_interest = '–î–ê' in reply or 'YES' in reply
                
                print(f"ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å–∞: {reply} ‚Üí {'‚úÖ –ò–ù–¢–ï–†–ï–°' if is_interest else '‚ùå –ù–ï–¢'}")
                return is_interest
                
            finally:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                if proxy_config.get('enabled', False) and original_proxy_env:
                    for key, value in original_proxy_env.items():
                        if value is None:
                            os.environ.pop(key, None)
                        else:
                            os.environ[key] = value
                            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ò–ò –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞: {e}")
            # Fallback –Ω–∞ —Ö–∞—Ä–¥–∫–æ–¥
            return self._is_car_interest_fallback(message_text)
    
    def _is_car_interest_fallback(self, message_text: str) -> bool:
        """Fallback –º–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"""
        if not message_text:
            return False
            
        car_keywords = [
            "–∫—É–ø–∏—Ç—å", "–ø–æ–∫—É–ø–∫–∞", "—Ö–æ—á—É", "–∏—â—É", "–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", "–ø—Ä–æ–¥–∞—é", "–ø—Ä–æ–¥–∞–∂–∞",
            "–∞–≤—Ç–æ–º–æ–±–∏–ª—å", "–º–∞—à–∏–Ω–∞", "–∞–≤—Ç–æ", "—Ç–∞—á–∫–∞", 
            "toyota", "honda", "bmw", "mercedes", "audi", "nissan", "mazda", "kia",
            "–±—é–¥–∂–µ—Ç", "—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ä—É–±–ª–µ–π", "—Ç—ã—Å—è—á", "–º–∏–ª–ª–∏–æ–Ω",
            "–¥–∏–ª–µ—Ä", "—Å–∞–ª–æ–Ω", "–∫—Ä–µ–¥–∏—Ç", "–ª–∏–∑–∏–Ω–≥", "—Ç–µ—Å—Ç-–¥—Ä–∞–π–≤"
        ]
        
        message_lower = message_text.lower()
        keyword_matches = sum(1 for keyword in car_keywords if keyword in message_lower)
        
        return keyword_matches >= 2
    
    async def process_user_message(self, sender, message_text: str, client, conversation_history: List[str] = None) -> Optional[str]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
        
        Args:
            sender: –û–±—ä–µ–∫—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ Telethon
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            client: Telegram –∫–ª–∏–µ–Ω—Ç
            conversation_history: –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ (–¥–æ 50) –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –û—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ None
        """
        if not self.enabled:
            return None
            
        user_id = str(sender.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
        if user_id in self.conversations:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä
            return await self._continue_conversation(user_id, message_text, sender, client)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∞–≤—Ç–æ (—Å –ò–ò –∞–Ω–∞–ª–∏–∑–æ–º –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞)
        if await self.is_car_interest_message(message_text, conversation_history):
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
            return await self._start_conversation(user_id, message_text, sender, client)
            
        return None
    
    async def _start_conversation(self, user_id: str, message_text: str, sender, client) -> str:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –∫–ª–∏–µ–Ω—Ç–æ–º"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        context = ConversationContext(
            user_id=user_id,
            username=sender.username,
            first_name=sender.first_name,
            phone=sender.phone
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        context.message_history.append({
            'type': 'incoming',
            'content': message_text,
            'timestamp': datetime.now().isoformat()
        })
        
        self.conversations[user_id] = context
        self.stats['conversations_started'] += 1
        
        print(f"üöó –ù–∞—á–∞—Ç –æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ {sender.username or sender.first_name} (–∏–Ω—Ç–µ—Ä–µ—Å –∫ –∞–≤—Ç–æ)")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        response = await self._generate_ai_response(context, message_text)
        
        if response:
            context.questions_asked += 1
            context.message_history.append({
                'type': 'outgoing',
                'content': response,
                'timestamp': datetime.now().isoformat()
            })
            self.stats['questions_asked'] += 1
            
        return response
    
    async def _continue_conversation(self, user_id: str, message_text: str, sender, client) -> Optional[str]:
        """–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä"""
        
        context = self.conversations[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
        if datetime.now() - context.last_message_time > timedelta(hours=self.response_timeout_hours):
            # –†–∞–∑–≥–æ–≤–æ—Ä —É—Å—Ç–∞—Ä–µ–ª
            await self._complete_conversation(context, "timeout")
            return None
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        context.message_history.append({
            'type': 'incoming',
            'content': message_text,
            'timestamp': datetime.now().isoformat()
        })
        
        context.responses_received += 1
        context.last_message_time = datetime.now()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        await self._analyze_user_response(context, message_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –æ–ø—Ä–æ—Å
        if context.conversation_complete or context.questions_asked >= self.max_questions:
            await self._complete_conversation(context, "completed")
            return None
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        response = await self._generate_ai_response(context, message_text)
        
        if response:
            context.questions_asked += 1
            context.message_history.append({
                'type': 'outgoing',
                'content': response,
                'timestamp': datetime.now().isoformat()
            })
            self.stats['questions_asked'] += 1
            
        return response
    
    async def _analyze_user_response(self, context: ConversationContext, message_text: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∫–µ/–±—é–¥–∂–µ—Ç–µ"""
        
        message_lower = message_text.lower()
        
        # –ò—â–µ–º –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        if not context.car_brand:
            car_brands = [
                'toyota', 'honda', 'bmw', 'mercedes', 'audi', 'volkswagen',
                'kia', 'hyundai', 'nissan', 'mazda', 'subaru', 'lexus',
                'lada', 'renault', 'peugeot', 'ford', 'chevrolet', 'skoda',
                '—Ç–æ–π–æ—Ç–∞', '—Ö–æ–Ω–¥–∞', '–±–º–≤', '–º–µ—Ä—Å–µ–¥–µ—Å', '–∞—É–¥–∏', '—Ñ–æ–ª—å–∫—Å–≤–∞–≥–µ–Ω',
                '–∫–∏–∞', '—Ö–µ–Ω–¥–∞–π', '–Ω–∏—Å—Å–∞–Ω', '–º–∞–∑–¥–∞', '—Å—É–±–∞—Ä—É', '–ª–µ–∫—Å—É—Å',
                '–ª–∞–¥–∞', '—Ä–µ–Ω–æ', '–ø–µ–∂–æ', '—Ñ–æ—Ä–¥', '—à–µ–≤—Ä–æ–ª–µ', '—à–∫–æ–¥–∞'
            ]
            
            for brand in car_brands:
                if brand in message_lower:
                    context.car_brand = brand.title()
                    self.stats['cars_identified'] += 1
                    print(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –º–∞—Ä–∫–∞: {context.car_brand}")
                    break
        
        # –ò—â–µ–º –±—é–¥–∂–µ—Ç
        if not context.budget:
            import re
            
            # –ò—â–µ–º —á–∏—Å–ª–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–∞–ª—é—Ç—ã
            budget_patterns = [
                r'(\d+(?:\s?\d+)*)\s*(?:—Ç—ã—Å—è—á?|—Ç—ã—Å\.?|k)',  # "500 —Ç—ã—Å—è—á", "500 —Ç—ã—Å", "500k"
                r'(\d+(?:\s?\d+)*)\s*(?:—Ä—É–±–ª–µ–π?|—Ä—É–±\.?|‚ÇΩ)',  # "500000 —Ä—É–±–ª–µ–π", "500000 —Ä—É–±"
                r'(\d+(?:\s?\d+)*)\s*(?:–º–∏–ª–ª–∏–æ–Ω–æ–≤?|–º–ª–Ω\.?)',  # "1.5 –º–∏–ª–ª–∏–æ–Ω–∞", "1 –º–ª–Ω"
                r'–¥–æ\s+(\d+(?:\s?\d+)*)',  # "–¥–æ 500000"
                r'–æ—Ç\s+(\d+(?:\s?\d+)*)',  # "–æ—Ç 300000"
                r'(\d+(?:\s?\d+)*)\s*[-‚Äì]\s*(\d+(?:\s?\d+)*)',  # "300000 - 500000"
            ]
            
            for pattern in budget_patterns:
                matches = re.findall(pattern, message_lower)
                if matches:
                    if isinstance(matches[0], tuple):
                        # –î–∏–∞–ø–∞–∑–æ–Ω
                        context.budget = f"{matches[0][0]}-{matches[0][1]}"
                    else:
                        # –û–¥–Ω–æ —á–∏—Å–ª–æ
                        context.budget = matches[0]
                    
                    self.stats['budgets_collected'] += 1
                    print(f"üí∞ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –±—é–¥–∂–µ—Ç: {context.budget}")
                    break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤ –ª–∏ –æ–ø—Ä–æ—Å –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
        if context.car_brand and context.budget:
            context.conversation_complete = True
    
    async def _generate_ai_response(self, context: ConversationContext, user_message: str) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç AI –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏"""
        
        if not self.ai_enabled or not self.openai_api_key:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            return self._get_fallback_response(context)
            
        try:
            import openai
            import os
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–¥–∏–∏
            system_prompt = CarInterestPrompts.get_prompt_for_stage(context, user_message)
            
            # üåê –ü–†–û–ö–°–ò –ü–û–î–î–ï–†–ñ–ö–ê (–∫–∞–∫ –≤ chatbot_export)
            proxy_config = self.ai_config.get('proxy', {})
            original_proxy_env = {}
            
            if proxy_config.get('enabled', False):
                proxy_url = proxy_config.get('url')
                if proxy_url:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                    for key in ['HTTP_PROXY', 'HTTPS_PROXY']:
                        original_proxy_env[key] = os.environ.get(key)
                        os.environ[key] = proxy_url
                    
                    print(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è OpenAI API: {proxy_url[:30]}...")
            
            try:
                client = openai.OpenAI(api_key=self.openai_api_key)
                
                response = client.chat.completions.create(
                    model=self.model,
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_message}
                    ],
                    max_tokens=self.max_tokens,
                    temperature=0.7
                )
                
                reply = response.choices[0].message.content.strip()
                print(f"ü§ñ AI –æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {reply[:50]}...")
                return reply
                
            finally:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                if proxy_config.get('enabled', False) and original_proxy_env:
                    for key, value in original_proxy_env.items():
                        if value is None:
                            os.environ.pop(key, None)
                        else:
                            os.environ[key] = value
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._get_fallback_response(context)
    
    def _get_fallback_response(self, context: ConversationContext) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        
        if context.questions_asked == 0:
            return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∏–∂—É –≤—ã –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å –ø–æ–∫—É–ø–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ö–∞–∫—É—é –º–∞—Ä–∫—É —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?"
        elif not context.car_brand:
            return "–ö–∞–∫—É—é –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ? Toyota, BMW, Mercedes –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?"
        elif not context.budget:
            return "–ê –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É?"
        else:
            return "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è."
    
    async def _complete_conversation(self, context: ConversationContext, reason: str):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        lead_info = {
            'user_id': context.user_id,
            'username': context.username,
            'first_name': context.first_name,
            'phone': context.phone,
            'car_brand': context.car_brand,
            'budget': context.budget,
            'conversation_length': len(context.message_history),
            'completion_reason': reason,
            'started_at': context.created_at.isoformat(),
            'completed_at': datetime.now().isoformat()
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±–æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        await self._send_lead_to_managers(lead_info, context)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if reason == "completed":
            self.stats['leads_completed'] += 1
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
        if context.user_id in self.conversations:
            del self.conversations[context.user_id]
            
        print(f"‚úÖ –û–ø—Ä–æ—Å {context.username} –∑–∞–≤–µ—Ä—à–µ–Ω ({reason})")
    
    async def _send_lead_to_managers(self, lead_info: Dict[str, Any], context: ConversationContext):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º —á–µ—Ä–µ–∑ –±–æ—Ç"""
        
        if not notification_bot:
            print("‚ö†Ô∏è –ë–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∏–¥–µ
            username_display = f"@{lead_info['username']}" if lead_info['username'] else "–ë–µ–∑ username"
            name_display = lead_info['first_name'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            phone_display = lead_info['phone'] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            brand_display = lead_info['car_brand'] or "‚ùì –ù–µ –≤—ã—è—Å–Ω–µ–Ω–æ"
            budget_display = lead_info['budget'] or "‚ùì –ù–µ —É–∫–∞–∑–∞–Ω"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞
            if lead_info['car_brand'] and lead_info['budget']:
                lead_status = "üî• –ì–û–†–Ø–ß–ò–ô –õ–ò–î"
                status_emoji = "üî•"
            elif lead_info['car_brand'] or lead_info['budget']:
                lead_status = "üü° –¢–Å–ü–õ–´–ô –õ–ò–î"
                status_emoji = "üü°"
            else:
                lead_status = "‚ùÑÔ∏è –•–û–õ–û–î–ù–´–ô –õ–ò–î"
                status_emoji = "‚ùÑÔ∏è"
            
            notification_text = f"""üöó {lead_status} - –ü–û–ö–£–ü–ê–¢–ï–õ–¨ –ê–í–¢–û–ú–û–ë–ò–õ–Ø

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {name_display} ({username_display})
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{phone_display}</code>

üöô <b>–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∞—è –º–∞—Ä–∫–∞:</b> {brand_display}
üí∞ <b>–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π –±—é–¥–∂–µ—Ç:</b> {budget_display}

üìä <b>–î–µ—Ç–∞–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ: {lead_info['conversation_length']}
‚Ä¢ –°—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {lead_info['completion_reason']}
‚Ä¢ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.fromisoformat(lead_info['started_at']).strftime('%d.%m.%Y %H:%M')}

{status_emoji} <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> {'–°—Ä–æ—á–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è!' if status_emoji == 'üî•' else '–°–≤—è–∑–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è' if status_emoji == 'üü°' else '–£—Ç–æ—á–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å'}"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ security notification (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω)
            await notification_bot.send_security_notification(
                account_info={'phone': 'AutoResponder', 'name': '–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–æ—Å–∞'},
                sender_info={'name': name_display, 'username': lead_info['username'] or 'unknown'},
                message_text=notification_text,
                message_type="üöó –ê–í–¢–û–õ–ò–î"
            )
            
            print(f"üì® –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º: {name_display}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–∞ –≤ –±–æ—Ç: {e}")
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞"""
        
        active_conversations = len(self.conversations)
        
        return {
            'enabled': self.enabled,
            'active_conversations': active_conversations,
            'total_conversations_started': self.stats['conversations_started'],
            'total_questions_asked': self.stats['questions_asked'],
            'leads_completed': self.stats['leads_completed'],
            'cars_identified': self.stats['cars_identified'],
            'budgets_collected': self.stats['budgets_collected'],
            'ai_enabled': self.ai_enabled
        }
    
    def cleanup_old_conversations(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã"""
        
        current_time = datetime.now()
        timeout = timedelta(hours=self.response_timeout_hours)
        
        expired_conversations = []
        for user_id, context in self.conversations.items():
            if current_time - context.last_message_time > timeout:
                expired_conversations.append(user_id)
        
        for user_id in expired_conversations:
            print(f"üßπ –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä: {user_id}")
            del self.conversations[user_id]
        
        return len(expired_conversations)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
auto_responder = None

def init_auto_responder(config: Dict[str, Any]):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    global auto_responder
    auto_responder = AutoResponder(config)
    return auto_responder

def get_auto_responder() -> Optional[AutoResponder]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞"""
    return auto_responder


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    test_config = {
        'auto_responder': {
            'enabled': True,
            'max_questions': 3,
            'ai_enabled': False,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –æ—Ç–≤–µ—Ç—ã
            'response_timeout_hours': 24
        }
    }
    
    responder = AutoResponder(test_config)
    
    # –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –∞–≤—Ç–æ
    test_messages = [
        "–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –∫—É–ø–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å Toyota –¥–æ 1 –º–∏–ª–ª–∏–æ–Ω–∞",  # True
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç BMW X5",  # True
        "–ü—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞?",  # False
        "–ò—â—É –Ω–µ–¥–æ—Ä–æ–≥—É—é –º–∞—à–∏–Ω—É –¥–æ 500 —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π",  # True
        "–ü–ª–∞–Ω–∏—Ä—É—é –ø–æ–∫—É–ø–∫—É —Å–µ–¥–∞–Ω–∞",  # True
    ]
    
    print("üß™ –¢–ï–°–¢ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ò–ù–¢–ï–†–ï–°–ê –ö –ê–í–¢–û:")
    for msg in test_messages:
        result = responder.is_car_interest_message(msg)
        print(f"  '{msg[:40]}...' ‚Üí {'‚úÖ –ò–ù–¢–ï–†–ï–°' if result else '‚ùå –ù–ï –ò–ù–¢–ï–†–ï–°'}")
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {responder.get_stats()}")
